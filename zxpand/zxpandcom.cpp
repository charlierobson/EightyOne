#include "zxpand.h"

#include "integer.h"
#include "ff.h"
#include "wildcard.h"
#include "zxpandio.h"

#include <string.h>
#include <ctype.h>
#include <stdlib.h>
#include <stdio.h>
#include <usart.h>

const int cmdrLen = 8993;
unsigned char cmdrData[8993] = {
	0x00, 0x00, 0x00, 0x10, 0x60, 0x11, 0x60, 0x29, 0x63, 0x00, 0x00, 0x2A,
	0x63, 0x29, 0x63, 0x00, 0x00, 0x2A, 0x63, 0x2A, 0x63, 0x00, 0x5D, 0x40,
	0x00, 0x02, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0x37, 0x01, 0x60, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x8D, 0x0C, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xBC,
	0x21, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x1F,
	0xEA, 0x7E, 0xC3, 0x8A, 0x40, 0x00, 0x00, 0x76, 0x76, 0xAF, 0xFD, 0x77,
	0x5D, 0xFD, 0x77, 0x5F, 0xFD, 0x77, 0x5E, 0xFD, 0x77, 0x61, 0xFD, 0x77,
	0x62, 0xCD, 0x7A, 0x44, 0xCD, 0xA5, 0x50, 0xCD, 0xFC, 0x44, 0x21, 0xE6,
	0x53, 0xCD, 0x08, 0x45, 0x3E, 0xC9, 0x32, 0x08, 0x45, 0xCD, 0xE8, 0x41,
	0xCD, 0x18, 0x42, 0xCD, 0xF9, 0x40, 0xCD, 0x72, 0x42, 0xCD, 0xD0, 0x42,
	0xCD, 0xEC, 0x44, 0xCD, 0x09, 0x46, 0xCD, 0x6F, 0x48, 0x18, 0xF5, 0xFE,
	0x40, 0x20, 0x02, 0xA7, 0xC9, 0xE6, 0x1F, 0xCD, 0xCB, 0x46, 0xE5, 0x01,
	0x00, 0x0A, 0xCD, 0x5E, 0x46, 0xE1, 0x01, 0x00, 0x0B, 0xCD, 0x31, 0x45,
	0xCD, 0x1C, 0x45, 0xCD, 0x1C, 0x45, 0xCD, 0x1C, 0x45, 0xCD, 0x1C, 0x45,
	0xCD, 0x7E, 0x47, 0xCD, 0x48, 0x46, 0xCD, 0x77, 0x47, 0xA7, 0x3F, 0xC9,
	0x11, 0x00, 0x00, 0xED, 0x53, 0x84, 0x6E, 0xED, 0x53, 0x82, 0x6E, 0x2A,
	0x86, 0x6E, 0x01, 0x40, 0x01, 0xCD, 0x33, 0x44, 0x21, 0x8A, 0x6E, 0x11,
	0x00, 0x6C, 0xCD, 0x0E, 0x44, 0xCD, 0xFA, 0x1F, 0x01, 0x07, 0x60, 0x3E,
	0x00, 0xED, 0x79, 0xCD, 0xF6, 0x1F, 0xCD, 0xC8, 0x40, 0xD8, 0x11, 0x00,
	0x00, 0xED, 0x53, 0x80, 0x6E, 0xED, 0x5B, 0x86, 0x6E, 0x01, 0x07, 0x60,
	0xF6, 0xFF, 0xED, 0x79, 0xCD, 0xF6, 0x1F, 0xFE, 0x3F, 0xC8, 0xCD, 0xC8,
	0x40, 0xD8, 0x2E, 0x10, 0xAF, 0xCD, 0xFC, 0x1F, 0x2A, 0x80, 0x6E, 0x23,
	0x22, 0x80, 0x6E, 0x7C, 0xFE, 0x02, 0xC8, 0x18, 0xDC, 0x3A, 0x80, 0x6E,
	0xA7, 0xC8, 0x2A, 0x82, 0x6E, 0xCD, 0xF0, 0x46, 0xED, 0x5B, 0x86, 0x6E,
	0x19, 0xCD, 0xC2, 0x42, 0x06, 0x13, 0xC5, 0xD5, 0xE5, 0x06, 0x0C, 0x0E,
	0xFF, 0x7E, 0xA7, 0x20, 0x01, 0x4F, 0xA1, 0x12, 0x23, 0x13, 0x10, 0xF5,
	0x3E, 0x10, 0xCD, 0x0F, 0x47, 0xE1, 0x3E, 0x21, 0xCD, 0x0F, 0x47, 0xD1,
	0xC1, 0x10, 0xDF, 0xC9, 0x2A, 0x84, 0x6E, 0xED, 0x5B, 0x82, 0x6E, 0x19,
	0xCD, 0xF0, 0x46, 0xED, 0x5B, 0x86, 0x6E, 0x19, 0x11, 0x93, 0x53, 0x18,
	0x0B, 0xFE, 0x12, 0x28, 0x06, 0xFE, 0x13, 0x28, 0x02, 0x13, 0x12, 0x23,
	0x7E, 0xA7, 0x20, 0xF1, 0x13, 0x3E, 0xFF, 0x12, 0x23, 0x7E, 0xFD, 0x77,
	0x60, 0x23, 0x7E, 0x32, 0xA4, 0x53, 0x23, 0x7E, 0x32, 0xA5, 0x53, 0xC9,
	0x21, 0xE6, 0x7F, 0x22, 0xE1, 0x41, 0x18, 0x06, 0x21, 0xF6, 0x80, 0x22,
	0xE1, 0x41, 0x2A, 0x84, 0x6E, 0xCD, 0x01, 0x47, 0xCD, 0xC2, 0x42, 0x19,
	0x2B, 0x06, 0x0E, 0x7E, 0x00, 0x00, 0x77, 0x23, 0x10, 0xF9, 0xC9, 0xAF,
	0x21, 0x00, 0x6E, 0x77, 0x11, 0x01, 0x6E, 0x01, 0x81, 0x01, 0xED, 0xB0,
	0x21, 0x00, 0x80, 0x22, 0x06, 0x6E, 0x21, 0x00, 0xA0, 0x22, 0x86, 0x6D,
	0x21, 0x02, 0x02, 0x22, 0x08, 0x6E, 0x21, 0x12, 0x02, 0x22, 0x88, 0x6D,
	0x3E, 0x18, 0x32, 0x0A, 0x6E, 0x3E, 0xFF, 0x32, 0x0B, 0x6E, 0xC9, 0xFD,
	0xCB, 0x5D, 0x86, 0x18, 0x04, 0xFD, 0xCB, 0x5D, 0xC6, 0x21, 0x00, 0x6E,
	0xFD, 0xCB, 0x5D, 0x46, 0x28, 0x03, 0x21, 0x80, 0x6D, 0x11, 0x80, 0x6E,
	0x01, 0x80, 0x00, 0xED, 0xB0, 0xC9, 0xCD, 0x18, 0x42, 0x18, 0x03, 0xCD,
	0x1E, 0x42, 0xCD, 0x04, 0x41, 0xCD, 0x72, 0x42, 0xC3, 0x56, 0x41, 0xFD,
	0x7E, 0x5D, 0xF5, 0xCD, 0x37, 0x42, 0x3A, 0x8A, 0x6D, 0xA7, 0xC4, 0x3C,
	0x42, 0xF1, 0xA7, 0xC0, 0xC3, 0x18, 0x42, 0x21, 0x80, 0x6D, 0xA7, 0xC0,
	0x21, 0x00, 0x6E, 0xC9, 0xFD, 0x7E, 0x5D, 0xEE, 0x01, 0xCD, 0x5C, 0x42,
	0x3E, 0x0A, 0xC3, 0x0A, 0x47, 0xFD, 0x7E, 0x5D, 0xCD, 0x5C, 0x42, 0x11,
	0x80, 0x6E, 0xEB, 0x01, 0x80, 0x00, 0xED, 0xB0, 0xC9, 0xD5, 0x01, 0x40,
	0x00, 0xED, 0xB0, 0xE1, 0xC3, 0x96, 0x42, 0x3A, 0x94, 0x53, 0xFE, 0x1B,
	0x28, 0x18, 0x21, 0x8A, 0x6E, 0xCD, 0x00, 0x44, 0x3E, 0x18, 0x2B, 0xBE,
	0x23, 0x28, 0x02, 0x77, 0x23, 0x11, 0x94, 0x53, 0xEB, 0xCD, 0x06, 0x44,
	0xEB, 0xC9, 0x21, 0x8B, 0x6E, 0xE5, 0x3E, 0x18, 0xCD, 0xF3, 0x43, 0xE1,
	0x20, 0x08, 0xCD, 0x00, 0x44, 0x3E, 0x18, 0xCD, 0xFB, 0x43, 0x36, 0xFF,
	0xC9, 0xC5, 0xED, 0x4B, 0x88, 0x6E, 0xCD, 0x56, 0x45, 0xC1, 0xED, 0x5B,
	0xF6, 0x52, 0xC9, 0xCD, 0xAC, 0x43, 0xCD, 0x8C, 0x43, 0x01, 0x00, 0x00,
	0xFD, 0xCB, 0x5E, 0xFE, 0x21, 0x05, 0x54, 0xCD, 0x4A, 0x45, 0xFD, 0xCB,
	0x5E, 0xBE, 0xFD, 0x7E, 0x5D, 0xF5, 0xCD, 0x18, 0x42, 0xCD, 0x56, 0x41,
	0xCD, 0x1E, 0x42, 0xCD, 0x56, 0x41, 0xF1, 0xCB, 0x47, 0xCC, 0x18, 0x42,
	0xCD, 0xCD, 0x41, 0xCD, 0x8D, 0x41, 0xCD, 0x10, 0x43, 0xC3, 0x3E, 0x43,
	0xAF, 0xCD, 0x77, 0x45, 0x28, 0xFB, 0xC9, 0xFD, 0xCB, 0x5E, 0xFE, 0x01,
	0x00, 0x16, 0xCD, 0x56, 0x45, 0xAF, 0xCD, 0x77, 0x45, 0x21, 0x8A, 0x6E,
	0xCD, 0x4D, 0x45, 0xCD, 0x09, 0x43, 0x01, 0x14, 0x16, 0xCD, 0x56, 0x45,
	0x2A, 0x80, 0x6E, 0xCD, 0xA9, 0x45, 0x21, 0xE6, 0x53, 0xCD, 0x4D, 0x45,
	0xFD, 0xCB, 0x5E, 0xBE, 0xC9, 0xFD, 0xCB, 0x5E, 0xFE, 0x01, 0x00, 0x17,
	0xCD, 0x56, 0x45, 0xAF, 0xCD, 0x77, 0x45, 0x21, 0x94, 0x53, 0xFD, 0xCB,
	0x60, 0x66, 0xCC, 0x4D, 0x45, 0xCD, 0x09, 0x43, 0xFD, 0xCB, 0x60, 0x66,
	0x20, 0x28, 0x01, 0x14, 0x17, 0xCD, 0x56, 0x45, 0x2A, 0xA4, 0x53, 0xCD,
	0xA9, 0x45, 0x21, 0xEE, 0x53, 0xCD, 0x4D, 0x45, 0xFD, 0xCB, 0x60, 0x46,
	0x28, 0x10, 0x01, 0x11, 0x17, 0xCD, 0x56, 0x45, 0x3E, 0x37, 0xCD, 0x77,
	0x45, 0x3E, 0x34, 0xCD, 0x77, 0x45, 0xFD, 0xCB, 0x5E, 0xBE, 0xC9, 0x2A,
	0x0C, 0x40, 0x23, 0x06, 0x16, 0x3E, 0x05, 0x77, 0x11, 0x0F, 0x00, 0x19,
	0x3E, 0x85, 0x77, 0x23, 0x3E, 0x05, 0x77, 0x11, 0x0F, 0x00, 0x19, 0x3E,
	0x85, 0x77, 0x23, 0x23, 0x10, 0xE7, 0xC9, 0x01, 0x00, 0x00, 0xCD, 0x56,
	0x45, 0x01, 0x00, 0x03, 0xAF, 0xCD, 0x77, 0x45, 0x0B, 0x79, 0xB0, 0x20,
	0xF7, 0xC9, 0xC5, 0x06, 0x40, 0xAF, 0xCD, 0x77, 0x45, 0x10, 0xFB, 0xC1,
	0xC9, 0x2A, 0x02, 0x40, 0xF9, 0xC6, 0x3F, 0x32, 0xD4, 0x43, 0xCF, 0xFF,
	0xCD, 0x06, 0x44, 0x3E, 0x18, 0xEB, 0xCD, 0xFB, 0x43, 0x36, 0xFF, 0xC9,
	0x1A, 0xBE, 0xC0, 0xFE, 0xFF, 0xC8, 0x23, 0x13, 0x18, 0xF6, 0x1A, 0xBE,
	0xC0, 0x23, 0x13, 0x10, 0xF9, 0xC9, 0xBE, 0xC8, 0xCB, 0x7E, 0xC0, 0x23,
	0x18, 0xF8, 0xBE, 0xC8, 0x2B, 0x18, 0xFB, 0xCB, 0x7E, 0xC0, 0x23, 0x18,
	0xFA, 0x7E, 0x12, 0xA7, 0xF8, 0x23, 0x13, 0x18, 0xF8, 0xD5, 0xCD, 0x06,
	0x44, 0x1B, 0x1A, 0xF6, 0x80, 0x12, 0xD1, 0xC9, 0x0E, 0x00, 0x2B, 0x23,
	0xCB, 0x7E, 0xC0, 0xBE, 0x20, 0xF9, 0x0C, 0x18, 0xF6, 0xE5, 0xAF, 0x4F,
	0xCB, 0x7E, 0x28, 0x02, 0xE1, 0xC9, 0x23, 0x0C, 0x18, 0xF6, 0xAF, 0xD5,
	0x77, 0xE5, 0xD1, 0x13, 0xED, 0xB0, 0xD1, 0xC9, 0x3E, 0x01, 0xCD, 0x4E,
	0x44, 0xFE, 0x40, 0xC0, 0xF5, 0x3E, 0x80, 0xCD, 0x59, 0x44, 0xF1, 0xC9,
	0xAF, 0xF5, 0x11, 0x00, 0x6C, 0xCD, 0x0E, 0x44, 0xCD, 0xFA, 0x1F, 0xF1,
	0x01, 0x07, 0x80, 0xED, 0x79, 0xCD, 0xF6, 0x1F, 0xFE, 0x40, 0xC9, 0x11,
	0x80, 0x6F, 0x12, 0x13, 0xCD, 0x0E, 0x44, 0x1B, 0xCD, 0xFA, 0x1F, 0x01,
	0x07, 0x60, 0x3E, 0x00, 0xED, 0x79, 0xC3, 0xF6, 0x1F, 0x3E, 0xB3, 0x18,
	0x02, 0x3E, 0xB2, 0x01, 0x07, 0xE0, 0xED, 0x79, 0x3E, 0xFF, 0xE3, 0xE3,
	0x3D, 0x20, 0xFB, 0xC9, 0x11, 0x80, 0x6F, 0xFD, 0xCB, 0x62, 0x46, 0x28,
	0x0F, 0xFD, 0xCB, 0x62, 0x86, 0xCD, 0x06, 0x44, 0xEB, 0x36, 0x19, 0x23,
	0x36, 0xBD, 0x18, 0x03, 0xCD, 0x0E, 0x44, 0xCD, 0x7E, 0x44, 0xCD, 0xE7,
	0x02, 0x21, 0xBC, 0x44, 0x11, 0x00, 0x20, 0x01, 0x0F, 0x00, 0xED, 0xB0,
	0xC3, 0x00, 0x20, 0x2A, 0x02, 0x40, 0xF9, 0x21, 0x07, 0x02, 0xE5, 0x11,
	0x80, 0x6F, 0xAF, 0xC3, 0xF8, 0x1F, 0x21, 0x80, 0x6F, 0xCD, 0x00, 0x44,
	0x3E, 0x19, 0x77, 0x23, 0x11, 0x00, 0x6F, 0xEB, 0xCD, 0x0E, 0x44, 0x11,
	0x80, 0x6F, 0xCD, 0xFA, 0x1F, 0x01, 0x07, 0x80, 0x3E, 0xE0, 0xED, 0x79,
	0xC3, 0xF6, 0x1F, 0x21, 0x34, 0x40, 0x7E, 0xBE, 0x28, 0xFD, 0xC9, 0xC9,
	0xC3, 0xE7, 0x02, 0xC9, 0xC3, 0x07, 0x02, 0x21, 0x0D, 0x57, 0x11, 0x00,
	0x70, 0x01, 0x80, 0x00, 0xED, 0xB0, 0xC9, 0x11, 0x00, 0x70, 0x7E, 0xCB,
	0x7F, 0x28, 0x06, 0x23, 0xCB, 0x7E, 0x28, 0xF6, 0xC9, 0x5F, 0x1A, 0x77,
	0x23, 0x18, 0xEF, 0x2A, 0x0C, 0x40, 0x01, 0x00, 0x03, 0x23, 0x7E, 0xFE,
	0x76, 0x28, 0xFA, 0xEE, 0x80, 0x77, 0x0B, 0x78, 0xB1, 0x20, 0xF2, 0xC9,
	0xCD, 0x26, 0x44, 0x3E, 0x20, 0x91, 0x1F, 0x4F, 0xCD, 0x56, 0x45, 0x18,
	0x0F, 0xFD, 0xCB, 0x5E, 0xFE, 0xCD, 0x4A, 0x45, 0xFD, 0xCB, 0x5E, 0xBE,
	0xC9, 0xCD, 0x56, 0x45, 0x7E, 0xA7, 0xF8, 0xCD, 0x77, 0x45, 0x23, 0x18,
	0xF7, 0xE5, 0xCD, 0x5F, 0x45, 0x22, 0xF6, 0x52, 0xE1, 0xC9, 0xD5, 0x68,
	0x26, 0x00, 0xE5, 0xD1, 0xCD, 0xEC, 0x46, 0x19, 0xE5, 0x79, 0xCD, 0x0F,
	0x47, 0xE1, 0xED, 0x5B, 0x0C, 0x40, 0x13, 0x19, 0xD1, 0xC9, 0xE5, 0x2A,
	0xF6, 0x52, 0xFD, 0xB6, 0x5E, 0x77, 0x23, 0xCB, 0x76, 0x28, 0x01, 0x23,
	0x22, 0xF6, 0x52, 0xE1, 0xC9, 0xCD, 0x77, 0x45, 0x10, 0xFB, 0xC9, 0x7C,
	0xCD, 0x95, 0x45, 0x7D, 0xF5, 0xCB, 0x1F, 0xCB, 0x1F, 0xCB, 0x1F, 0xCB,
	0x1F, 0xCD, 0xA2, 0x45, 0xF1, 0xE6, 0x0F, 0xC6, 0x1C, 0xC3, 0x77, 0x45,
	0x1E, 0x00, 0x01, 0xF0, 0xD8, 0xCD, 0xC6, 0x45, 0x01, 0x18, 0xFC, 0xCD,
	0xC6, 0x45, 0x01, 0x9C, 0xFF, 0xCD, 0xC6, 0x45, 0x0E, 0xF6, 0xCD, 0xC6,
	0x45, 0x0E, 0xFF, 0x1E, 0xFF, 0x3E, 0x1B, 0x3C, 0x09, 0x38, 0xFC, 0xED,
	0x42, 0xFE, 0x1C, 0x28, 0x02, 0x1E, 0xFF, 0xA3, 0xC3, 0x77, 0x45, 0x1E,
	0x00, 0x01, 0xF0, 0xD8, 0xCD, 0xF5, 0x45, 0x01, 0x18, 0xFC, 0xCD, 0xF5,
	0x45, 0x01, 0x9C, 0xFF, 0xCD, 0xF5, 0x45, 0x0E, 0xF6, 0xCD, 0xF5, 0x45,
	0x0E, 0xFF, 0x1E, 0xFF, 0x3E, 0x1B, 0x3C, 0x09, 0x38, 0xFC, 0xED, 0x42,
	0xFE, 0x1C, 0x20, 0x02, 0xA3, 0xC8, 0x1E, 0xFF, 0xCD, 0x77, 0x45, 0xC9,
	0x01, 0x1C, 0x00, 0xCD, 0x56, 0x45, 0xFD, 0xCB, 0x5E, 0xFE, 0xFD, 0xCB,
	0x5F, 0x46, 0x20, 0x0F, 0xAF, 0xCD, 0x77, 0x45, 0xCD, 0x77, 0x45, 0xCD,
	0x77, 0x45, 0xCD, 0x77, 0x45, 0x18, 0x06, 0x2A, 0x25, 0x40, 0xCD, 0x90,
	0x45, 0xFD, 0xCB, 0x5E, 0xBE, 0xC9, 0xE5, 0xC5, 0xD5, 0x2A, 0xF6, 0x52,
	0x22, 0x00, 0x6D, 0x11, 0x02, 0x6D, 0x01, 0x63, 0x00, 0xED, 0xB0, 0xD1,
	0xC1, 0xE1, 0xC9, 0xE5, 0xC5, 0xD5, 0x21, 0x02, 0x6D, 0xED, 0x5B, 0x00,
	0x6D, 0x01, 0x63, 0x00, 0xED, 0xB0, 0xD1, 0xC1, 0xE1, 0xC9, 0x01, 0x00,
	0x15, 0xCD, 0x56, 0x45, 0xCD, 0x33, 0x46, 0x3E, 0x07, 0xCD, 0x77, 0x45,
	0x3E, 0x03, 0x06, 0x1E, 0xCD, 0x8A, 0x45, 0x3E, 0x84, 0xCD, 0x77, 0x45,
	0x3E, 0x05, 0xCD, 0x77, 0x45, 0x3E, 0x00, 0x06, 0x1E, 0xCD, 0x8A, 0x45,
	0x3E, 0x85, 0xCD, 0x77, 0x45, 0x3E, 0x82, 0xCD, 0x77, 0x45, 0x3E, 0x83,
	0x06, 0x1E, 0xCD, 0x8A, 0x45, 0x3E, 0x81, 0xC3, 0x77, 0x45, 0x3E, 0x00,
	0x3D, 0x20, 0xFD, 0xC9, 0x01, 0x03, 0x08, 0xCD, 0x56, 0x45, 0x21, 0x08,
	0x54, 0xCD, 0x4D, 0x45, 0x01, 0x05, 0x0C, 0xCD, 0x56, 0x45, 0x21, 0xF5,
	0x56, 0xC3, 0x4D, 0x45, 0x21, 0x05, 0x54, 0x01, 0x00, 0x01, 0xCD, 0x31,
	0x45, 0x23, 0x04, 0xCB, 0x76, 0x28, 0xF7, 0xCB, 0x46, 0xC0, 0x04, 0x23,
	0x18, 0xF0, 0x21, 0xA6, 0x53, 0xE5, 0xCB, 0x27, 0xCD, 0x0F, 0x47, 0xE1,
	0x22, 0xDB, 0x46, 0x00, 0x00, 0x2A, 0x00, 0x00, 0xC9, 0xE5, 0xA7, 0xED,
	0x52, 0xE1, 0xD8, 0xEB, 0xC9, 0xE5, 0xA7, 0xED, 0x52, 0xE1, 0xC9, 0xCB,
	0x25, 0xCB, 0x14, 0xCB, 0x25, 0xCB, 0x14, 0xCB, 0x25, 0xCB, 0x14, 0xCB,
	0x25, 0xCB, 0x14, 0xCB, 0x25, 0xCB, 0x14, 0xC9, 0xD5, 0xE5, 0xD1, 0xCD,
	0xEC, 0x46, 0x19, 0xD1, 0xC9, 0x85, 0x6F, 0xD0, 0x24, 0xC9, 0xE3, 0x22,
	0x3B, 0x47, 0xE1, 0xE3, 0xD5, 0x5F, 0x16, 0x00, 0x19, 0xD1, 0xE3, 0x18,
	0x1C, 0xE3, 0x22, 0x3B, 0x47, 0xE1, 0xE3, 0xEB, 0x33, 0x33, 0xE3, 0x19,
	0xE3, 0x3B, 0x3B, 0xD1, 0xEB, 0x18, 0x0A, 0xE3, 0x22, 0x3B, 0x47, 0xE1,
	0xE3, 0xCD, 0xF0, 0x46, 0xE3, 0xC3, 0x00, 0x00, 0x22, 0x48, 0x47, 0x22,
	0x4C, 0x47, 0x7E, 0x23, 0xB6, 0xC8, 0x2A, 0x00, 0x00, 0x2B, 0x22, 0x00,
	0x00, 0xC9, 0x34, 0xC0, 0x23, 0x34, 0x2B, 0xC9, 0xCB, 0x24, 0x30, 0x01,
	0x6B, 0x29, 0x30, 0x01, 0x19, 0x29, 0x30, 0x01, 0x19, 0x29, 0x30, 0x01,
	0x19, 0x29, 0x30, 0x01, 0x19, 0x29, 0x30, 0x01, 0x19, 0x29, 0x30, 0x01,
	0x19, 0x29, 0x30, 0x01, 0x19, 0xC9, 0xCD, 0xBB, 0x02, 0x2C, 0x20, 0xFA,
	0xC9, 0xCD, 0xBB, 0x02, 0x2C, 0x20, 0xFA, 0xCD, 0xBB, 0x02, 0xE5, 0xC1,
	0x51, 0x14, 0x28, 0xF7, 0xCD, 0xBD, 0x07, 0x7E, 0xA7, 0xC8, 0xFE, 0x77,
	0xC8, 0xFE, 0x76, 0xC8, 0xFE, 0x0B, 0x38, 0xE7, 0xFE, 0x40, 0x30, 0xE3,
	0xC9, 0xFD, 0xCB, 0x61, 0x46, 0x20, 0x0B, 0xCD, 0xBB, 0x02, 0x2C, 0x20,
	0x2B, 0xFD, 0xCB, 0x61, 0xC6, 0xC9, 0xCD, 0xBB, 0x02, 0x7D, 0x3C, 0xC8,
	0xE5, 0xC1, 0xCD, 0xBD, 0x07, 0x7E, 0xA7, 0x28, 0x10, 0xFE, 0x76, 0x28,
	0x0C, 0xFE, 0x77, 0x28, 0x08, 0xFE, 0x0B, 0x38, 0x0B, 0xFE, 0x40, 0x30,
	0x07, 0xFD, 0xCB, 0x61, 0x86, 0xFE, 0xFF, 0xC9, 0x3E, 0x00, 0xA7, 0xC9,
	0x3A, 0x34, 0x40, 0xE6, 0x10, 0xCB, 0x27, 0xCB, 0x27, 0xCB, 0x27, 0xCD,
	0x77, 0x45, 0x2A, 0xF6, 0x52, 0x2B, 0x22, 0xF6, 0x52, 0xC9, 0xE5, 0xED,
	0x4B, 0xF6, 0x52, 0xED, 0x43, 0x20, 0x48, 0xED, 0x43, 0x38, 0x48, 0xCD,
	0x4D, 0x45, 0xCD, 0xDD, 0x47, 0xCD, 0xA2, 0x47, 0x28, 0xF8, 0xA7, 0x28,
	0xF5, 0xFE, 0x76, 0x28, 0x25, 0xFE, 0x77, 0x28, 0x09, 0xFE, 0x0C, 0x28,
	0x31, 0xCD, 0x77, 0x45, 0x18, 0xE4, 0x11, 0x00, 0x00, 0x2A, 0xF6, 0x52,
	0xA7, 0xED, 0x52, 0x28, 0xD9, 0x2A, 0xF6, 0x52, 0xAF, 0xCD, 0x77, 0x45,
	0x2B, 0x22, 0xF6, 0x52, 0x18, 0xCC, 0x11, 0x00, 0x00, 0xD5, 0x2A, 0xF6,
	0x52, 0xA7, 0xED, 0x52, 0xE5, 0xC1, 0xE1, 0xD1, 0xED, 0xB0, 0xEB, 0x36,
	0xFF, 0xC9, 0xAF, 0xE1, 0xC9, 0xCD, 0xFE, 0x1F, 0xED, 0x4B, 0x25, 0x40,
	0xF6, 0x07, 0xFE, 0xFF, 0xC8, 0x21, 0xF8, 0x52, 0x1E, 0x05, 0xCB, 0x7F,
	0x20, 0x04, 0x4E, 0x23, 0x46, 0xC9, 0x23, 0x23, 0xCB, 0x27, 0x1D, 0x20,
	0xF1, 0xC9, 0xCD, 0x4E, 0x48, 0x11, 0x02, 0x53, 0xD5, 0xED, 0x53, 0x7B,
	0x48, 0x2A, 0x00, 0x00, 0xA7, 0xED, 0x42, 0x13, 0x13, 0xD5, 0xE1, 0x20,
	0x0E, 0x23, 0x23, 0xE5, 0xCD, 0xA3, 0x48, 0xE1, 0x23, 0x23, 0xDC, 0xA3,
	0x48, 0xD1, 0xC9, 0xAF, 0x77, 0x23, 0x77, 0x3E, 0x08, 0xCD, 0x0F, 0x47,
	0xD1, 0x1A, 0xA7, 0x20, 0xD3, 0xC9, 0xE5, 0x7E, 0x23, 0x66, 0x6F, 0xE3,
	0xC9, 0x1A, 0xA7, 0xC0, 0x3C, 0x12, 0x3F, 0xC9, 0x1A, 0x6F, 0x3C, 0xE6,
	0x0F, 0x12, 0x7D, 0xA7, 0xC0, 0x3F, 0xC9, 0xED, 0x53, 0xC5, 0x48, 0xED,
	0x53, 0xDC, 0x48, 0x2A, 0x00, 0x00, 0x7C, 0xA7, 0x20, 0x07, 0x2E, 0xE7,
	0x26, 0x01, 0x3F, 0x18, 0x09, 0x2C, 0x7D, 0xFE, 0x19, 0x20, 0x03, 0xAF,
	0x6F, 0x3F, 0x22, 0x00, 0x00, 0xC9, 0xFD, 0xCB, 0x5F, 0x46, 0x28, 0x05,
	0xFD, 0xCB, 0x5F, 0x86, 0xC9, 0xFD, 0xCB, 0x5F, 0xC6, 0xC9, 0xFD, 0xCB,
	0x60, 0x66, 0xC8, 0x3A, 0x94, 0x53, 0xFE, 0x1B, 0x20, 0x06, 0x3A, 0x95,
	0x53, 0xFE, 0xFF, 0xC8, 0xCD, 0x72, 0x42, 0xFD, 0x7E, 0x5D, 0xEE, 0x01,
	0xFD, 0x77, 0x5D, 0xCD, 0x5C, 0x42, 0x11, 0x06, 0x00, 0x19, 0x11, 0x86,
	0x6E, 0x01, 0x04, 0x00, 0xED, 0xB0, 0xCD, 0x8C, 0x42, 0xCD, 0xF4, 0x44,
	0xCD, 0xF9, 0x40, 0xCD, 0x72, 0x42, 0xCD, 0x56, 0x41, 0xFD, 0x7E, 0x5D,
	0xEE, 0x01, 0xFD, 0x77, 0x5D, 0xF5, 0xCC, 0x18, 0x42, 0xF1, 0xC4, 0x1E,
	0x42, 0xC3, 0xF8, 0x44, 0xCD, 0xC5, 0x41, 0x2A, 0x84, 0x6E, 0x7C, 0xB5,
	0x28, 0x08, 0x21, 0x00, 0x00, 0x22, 0x84, 0x6E, 0x18, 0x43, 0x2A, 0x82,
	0x6E, 0x11, 0x13, 0x00, 0xA7, 0xED, 0x52, 0x30, 0x03, 0x21, 0x00, 0x00,
	0x22, 0x82, 0x6E, 0x18, 0x30, 0xCD, 0xC5, 0x41, 0x21, 0x12, 0x00, 0xED,
	0x5B, 0x84, 0x6E, 0xCD, 0xE6, 0x46, 0x28, 0x0D, 0xED, 0x5B, 0x80, 0x6E,
	0x1B, 0xCD, 0xDE, 0x46, 0x22, 0x84, 0x6E, 0x18, 0x14, 0x2A, 0x82, 0x6E,
	0x11, 0x13, 0x00, 0x19, 0xE5, 0x2A, 0x80, 0x6E, 0xED, 0x52, 0xD1, 0xCD,
	0xDE, 0x46, 0x22, 0x82, 0x6E, 0xCD, 0x72, 0x42, 0xCD, 0x8D, 0x41, 0xCD,
	0x56, 0x41, 0xCD, 0xCD, 0x41, 0xCD, 0x10, 0x43, 0xC3, 0x3E, 0x43, 0x3A,
	0x8B, 0x6E, 0xFE, 0xFF, 0xC8, 0x3E, 0x1B, 0x32, 0x94, 0x53, 0x32, 0x95,
	0x53, 0x3E, 0xFF, 0x32, 0x96, 0x53, 0xC3, 0x40, 0x4A, 0xFD, 0xCB, 0x62,
	0xC6, 0x18, 0x57, 0x21, 0x94, 0x53, 0x3E, 0x1B, 0xCD, 0xF3, 0x43, 0xC0,
	0x23, 0x0E, 0x01, 0x11, 0xFF, 0x49, 0xCD, 0xEE, 0x49, 0xC8, 0x0E, 0x02,
	0x11, 0x03, 0x4A, 0xCD, 0xEE, 0x49, 0xC8, 0x0E, 0x03, 0x11, 0x07, 0x4A,
	0xCD, 0xEE, 0x49, 0xC8, 0x0E, 0x04, 0x11, 0x09, 0x4A, 0xCD, 0xEE, 0x49,
	0xC9, 0xE5, 0x06, 0x04, 0x1A, 0xBE, 0x20, 0x08, 0xFE, 0xFF, 0x28, 0x04,
	0x23, 0x13, 0x10, 0xF4, 0xE1, 0xC9, 0x39, 0x3D, 0x39, 0xFF, 0x2D, 0x37,
	0x2C, 0xFF, 0x35, 0xFF, 0x27, 0x32, 0x35, 0xFF, 0xFD, 0xCB, 0x60, 0x66,
	0x20, 0x2D, 0xFD, 0xCB, 0x62, 0x86, 0xCD, 0xC0, 0x49, 0xC0, 0x79, 0xFE,
	0x01, 0xCA, 0xBD, 0x4D, 0xFE, 0x04, 0xCA, 0xAE, 0x51, 0xFE, 0x02, 0xFE,
	0x03, 0xC0, 0x21, 0x8A, 0x6E, 0x3E, 0x12, 0xCD, 0x64, 0x44, 0xCD, 0xC8,
	0x40, 0xD8, 0xCD, 0x14, 0x50, 0x21, 0x94, 0x53, 0xC3, 0x8D, 0x44, 0x3A,
	0x94, 0x53, 0xFE, 0x1B, 0x20, 0x06, 0x3A, 0x95, 0x53, 0xFE, 0xFF, 0xC8,
	0xCD, 0xC5, 0x41, 0xCD, 0x8C, 0x42, 0xCD, 0xF4, 0x44, 0xCD, 0xF9, 0x40,
	0xCD, 0x72, 0x42, 0xCD, 0x56, 0x41, 0xCD, 0xCD, 0x41, 0xCD, 0x8D, 0x41,
	0xCD, 0x10, 0x43, 0xCD, 0x3E, 0x43, 0xC3, 0xF8, 0x44, 0xFD, 0xCB, 0x5D,
	0x46, 0xC8, 0xCD, 0x72, 0x42, 0xCD, 0xC5, 0x41, 0xCD, 0x18, 0x42, 0xCD,
	0x8D, 0x41, 0xCD, 0xCD, 0x41, 0xCD, 0x10, 0x43, 0xC3, 0x3E, 0x43, 0xFD,
	0xCB, 0x5D, 0x46, 0xC0, 0x3A, 0x8A, 0x6D, 0xA7, 0xC8, 0xCD, 0x72, 0x42,
	0xCD, 0xC5, 0x41, 0xCD, 0x1E, 0x42, 0xCD, 0x8D, 0x41, 0xCD, 0xCD, 0x41,
	0xCD, 0x10, 0x43, 0xC3, 0x3E, 0x43, 0xCD, 0x2A, 0x0A, 0xCF, 0xFF, 0xCD,
	0xC5, 0x41, 0x21, 0x84, 0x6E, 0xCD, 0x3D, 0x47, 0x20, 0x0B, 0x21, 0x82,
	0x6E, 0xCD, 0x3D, 0x47, 0x28, 0x03, 0xCD, 0x56, 0x41, 0xCD, 0x72, 0x42,
	0xCD, 0xCD, 0x41, 0xCD, 0x8D, 0x41, 0xC3, 0x3E, 0x43, 0xCD, 0xC5, 0x41,
	0x2A, 0x84, 0x6E, 0xED, 0x5B, 0x80, 0x6E, 0x1B, 0xA7, 0xED, 0x52, 0x28,
	0x28, 0x2A, 0x84, 0x6E, 0x7D, 0xFE, 0x12, 0x28, 0x06, 0x23, 0x22, 0x84,
	0x6E, 0x18, 0x1A, 0xED, 0x5B, 0x82, 0x6E, 0x19, 0xED, 0x5B, 0x80, 0x6E,
	0x1B, 0xED, 0x52, 0x28, 0x0C, 0xED, 0x5B, 0x82, 0x6E, 0x13, 0xED, 0x53,
	0x82, 0x6E, 0xCD, 0x56, 0x41, 0xCD, 0x72, 0x42, 0xCD, 0xCD, 0x41, 0xCD,
	0x8D, 0x41, 0xC3, 0x3E, 0x43, 0x2A, 0x82, 0x6E, 0x01, 0x12, 0x00, 0x09,
	0xED, 0x5B, 0x80, 0x6E, 0xEB, 0xED, 0x52, 0x30, 0x03, 0x21, 0x00, 0x00,
	0x7C, 0xB5, 0xC0, 0x2A, 0x82, 0x6E, 0x7C, 0xB5, 0x28, 0x06, 0x21, 0x82,
	0x6E, 0xC3, 0x3D, 0x47, 0x2A, 0x80, 0x6E, 0xED, 0x5B, 0x84, 0x6E, 0xA7,
	0xED, 0x52, 0xC0, 0x21, 0x84, 0x6E, 0xC3, 0x3D, 0x47, 0x3A, 0x94, 0x53,
	0xFE, 0x1B, 0xC8, 0xCD, 0xC5, 0x41, 0x21, 0x8A, 0x6E, 0x11, 0x80, 0x6F,
	0xD5, 0xCD, 0x82, 0x42, 0x2B, 0xCB, 0xFE, 0xD1, 0x3E, 0x01, 0xCD, 0xF8,
	0x1F, 0xCD, 0xF6, 0x1F, 0xCD, 0xC8, 0x40, 0xCD, 0xF4, 0x44, 0xCD, 0x04,
	0x41, 0xCD, 0x72, 0x42, 0xCD, 0x12, 0x4B, 0xCD, 0x56, 0x41, 0xCD, 0xCD,
	0x41, 0xCD, 0x8D, 0x41, 0xCD, 0x10, 0x43, 0xCD, 0x3E, 0x43, 0xC3, 0xF8,
	0x44, 0xFD, 0x7E, 0x60, 0xE6, 0x10, 0xC0, 0x3A, 0x8A, 0x6D, 0xA7, 0xC8,
	0x21, 0x00, 0x40, 0xED, 0x5B, 0xA4, 0x53, 0xA7, 0xED, 0x52, 0xD8, 0xCD,
	0xC5, 0x41, 0x21, 0x8A, 0x6E, 0x11, 0x80, 0x6F, 0xCD, 0x82, 0x42, 0x11,
	0xF6, 0x53, 0xEB, 0xCD, 0x0E, 0x44, 0xFD, 0x7E, 0x5D, 0xEE, 0x01, 0xCD,
	0x5C, 0x42, 0x11, 0x0A, 0x00, 0x19, 0x11, 0x00, 0x6F, 0xCD, 0x82, 0x42,
	0xE5, 0x21, 0x00, 0x6F, 0xCD, 0x4D, 0x44, 0x20, 0x10, 0x21, 0x00, 0x6F,
	0xCD, 0x3D, 0x44, 0x28, 0x08, 0xE1, 0x3E, 0x08, 0xCD, 0xC8, 0x40, 0x18,
	0x34, 0xE1, 0x11, 0xFD, 0x53, 0xEB, 0xCD, 0x06, 0x44, 0xED, 0x53, 0xF6,
	0x52, 0x2A, 0xA4, 0x53, 0xCD, 0xD8, 0x45, 0x2A, 0xF6, 0x52, 0x2B, 0xCB,
	0xFE, 0xCD, 0xE7, 0x02, 0x11, 0x80, 0x6F, 0xAF, 0xCD, 0xF8, 0x1F, 0xCD,
	0xC8, 0x40, 0x38, 0x0D, 0x11, 0x00, 0x6F, 0x3E, 0xFF, 0xCD, 0xF8, 0x1F,
	0xCD, 0xC8, 0x40, 0x38, 0x00, 0xCD, 0x72, 0x42, 0xCD, 0x48, 0x42, 0xCD,
	0xCD, 0x41, 0xCD, 0x8D, 0x41, 0xCD, 0x10, 0x43, 0xCD, 0x3E, 0x43, 0xC3,
	0x07, 0x02, 0xFD, 0xCB, 0x60, 0x66, 0xC0, 0x3A, 0x8A, 0x6D, 0xA7, 0xC8,
	0xCD, 0xC5, 0x41, 0x21, 0x8A, 0x6E, 0x11, 0x80, 0x6F, 0xCD, 0x82, 0x42,
	0xFD, 0x7E, 0x5D, 0xEE, 0x01, 0xCD, 0x5C, 0x42, 0x11, 0x0A, 0x00, 0x19,
	0x11, 0x00, 0x6F, 0xCD, 0x82, 0x42, 0xCD, 0xF4, 0x44, 0xCD, 0xCB, 0x44,
	0xCD, 0xC8, 0x40, 0x38, 0x0F, 0x21, 0x80, 0x6E, 0xCD, 0x3D, 0x47, 0xCD,
	0x12, 0x4B, 0xCD, 0x72, 0x42, 0xCD, 0x48, 0x42, 0xCD, 0xCD, 0x41, 0xCD,
	0x8D, 0x41, 0xCD, 0x10, 0x43, 0xCD, 0x3E, 0x43, 0xC3, 0xF8, 0x44, 0x3A,
	0x94, 0x53, 0xFE, 0x1B, 0xC8, 0xFD, 0x36, 0x63, 0x00, 0xCD, 0xC5, 0x41,
	0x21, 0x8A, 0x6E, 0x11, 0x80, 0x6F, 0xCD, 0x82, 0x42, 0x21, 0x80, 0x6F,
	0x11, 0x00, 0x6F, 0xCD, 0x06, 0x44, 0xCD, 0x5B, 0x46, 0x01, 0x1A, 0x17,
	0x21, 0xDD, 0x56, 0xCD, 0x3E, 0x45, 0x01, 0x01, 0x16, 0xCD, 0x56, 0x45,
	0x21, 0x00, 0x6F, 0xCD, 0xF3, 0x47, 0xF5, 0xCD, 0x48, 0x46, 0xF1, 0x28,
	0x64, 0x21, 0x80, 0x6F, 0x11, 0x00, 0x6C, 0xD5, 0xCD, 0xD5, 0x43, 0x21,
	0x00, 0x6F, 0x11, 0x40, 0x6C, 0xD5, 0xCD, 0xD5, 0x43, 0xE1, 0xD1, 0xCD,
	0xE1, 0x43, 0x28, 0x04, 0xFD, 0xCB, 0x63, 0xC6, 0xFD, 0xCB, 0x60, 0x66,
	0x28, 0x0F, 0xCD, 0x65, 0x42, 0x11, 0x80, 0x6F, 0xCD, 0xE1, 0x43, 0x20,
	0x04, 0xFD, 0xCB, 0x63, 0xCE, 0xCD, 0xF4, 0x44, 0xCD, 0xCB, 0x44, 0xCD,
	0xC8, 0x40, 0x38, 0x25, 0xFD, 0xCB, 0x63, 0x4E, 0x28, 0x0A, 0xCD, 0x65,
	0x42, 0x11, 0x00, 0x6F, 0xEB, 0xCD, 0x06, 0x44, 0xFD, 0xCB, 0x63, 0x46,
	0x28, 0x0C, 0x21, 0x80, 0x6E, 0xCD, 0x3D, 0x47, 0xCD, 0x12, 0x4B, 0xCD,
	0x72, 0x42, 0xCD, 0x48, 0x42, 0xCD, 0xCD, 0x41, 0xCD, 0x8D, 0x41, 0xCD,
	0x10, 0x43, 0xCD, 0x3E, 0x43, 0xC3, 0xF8, 0x44, 0xCD, 0xC5, 0x41, 0xCD,
	0x5B, 0x46, 0x01, 0x10, 0x17, 0x21, 0xE4, 0x56, 0xCD, 0x3E, 0x45, 0x01,
	0x01, 0x16, 0xCD, 0x56, 0x45, 0x21, 0x94, 0x53, 0x36, 0xFF, 0xCD, 0xF3,
	0x47, 0xF5, 0xCD, 0x48, 0x46, 0xF1, 0x28, 0x2E, 0x21, 0x80, 0x6F, 0x36,
	0x15, 0x23, 0x11, 0x8A, 0x6E, 0xEB, 0xCD, 0x82, 0x42, 0x2B, 0xCB, 0xFE,
	0x11, 0x80, 0x6F, 0xCD, 0xFA, 0x1F, 0x01, 0x07, 0x60, 0x3E, 0x00, 0xED,
	0x79, 0xCD, 0xF6, 0x1F, 0xCD, 0xC8, 0x40, 0x38, 0x09, 0xCD, 0x04, 0x41,
	0xCD, 0x72, 0x42, 0xCD, 0x56, 0x41, 0xCD, 0xCD, 0x41, 0xCD, 0x8D, 0x41,
	0xCD, 0x10, 0x43, 0xCD, 0x3E, 0x43, 0xC3, 0xF8, 0x44, 0xFD, 0xCB, 0x5E,
	0xFE, 0xCD, 0xAC, 0x43, 0xCD, 0xB5, 0x46, 0xFD, 0xCB, 0x5E, 0xBE, 0x3A,
	0x25, 0x40, 0xFE, 0xFF, 0x20, 0xF9, 0x3A, 0x26, 0x40, 0xFE, 0xFF, 0x20,
	0xF2, 0x3A, 0x25, 0x40, 0xFE, 0xFF, 0x28, 0xF9, 0x3A, 0x26, 0x40, 0xFE,
	0xFF, 0x28, 0xF2, 0xC3, 0xD0, 0x42, 0xAF, 0xCD, 0xF8, 0x1F, 0xCD, 0xC8,
	0x40, 0xD0, 0xE1, 0xC9, 0x21, 0x8A, 0x6E, 0x3E, 0x12, 0xCD, 0x64, 0x44,
	0xCD, 0xC8, 0x40, 0xD8, 0x21, 0x94, 0x53, 0x11, 0x80, 0x6F, 0xCD, 0x06,
	0x44, 0xCD, 0xE7, 0x02, 0x21, 0x03, 0x50, 0xCD, 0x06, 0x44, 0x11, 0x80,
	0x6F, 0xCD, 0xB3, 0x4D, 0xAF, 0x77, 0x23, 0x22, 0xFC, 0x4F, 0x22, 0xFE,
	0x4F, 0xCD, 0xCA, 0x4E, 0xCD, 0x2B, 0x0F, 0xCD, 0xFA, 0x4E, 0x21, 0x00,
	0x98, 0xCD, 0xCA, 0x4E, 0x22, 0x00, 0x50, 0xAF, 0x32, 0x02, 0x50, 0x7E,
	0x23, 0xFE, 0x00, 0x28, 0x6A, 0xFE, 0x0A, 0x28, 0x54, 0xFE, 0x0D, 0x28,
	0x4F, 0x47, 0xAF, 0x32, 0x02, 0x50, 0x78, 0xFE, 0x20, 0x28, 0x32, 0x38,
	0xE6, 0x2B, 0xE5, 0x06, 0xFF, 0x7E, 0x23, 0x04, 0xFE, 0x21, 0x30, 0xF9,
	0xE1, 0x3A, 0xF2, 0x4F, 0x80, 0xFE, 0x2B, 0x38, 0x0D, 0x3A, 0xF2, 0x4F,
	0xB7, 0x28, 0x07, 0x3E, 0x0A, 0xCD, 0x5C, 0x4F, 0x18, 0x2E, 0x3E, 0x2A,
	0xB8, 0x30, 0x01, 0x47, 0x7E, 0x23, 0xCD, 0x5C, 0x4F, 0x10, 0xF9, 0x18,
	0x1F, 0x3A, 0xF2, 0x4F, 0xB7, 0x20, 0x09, 0x2B, 0x2B, 0x7E, 0x23, 0x23,
	0xFE, 0x0A, 0x20, 0xA7, 0x3E, 0x20, 0x18, 0x09, 0x23, 0x3A, 0x02, 0x50,
	0xB7, 0x20, 0x98, 0x3E, 0x0A, 0xCD, 0x5C, 0x4F, 0x3A, 0xF1, 0x4F, 0xFE,
	0x18, 0x38, 0x90, 0xE5, 0xCD, 0x7E, 0x47, 0xE1, 0xFE, 0x22, 0x28, 0x24,
	0xFE, 0x23, 0x28, 0x0E, 0xFE, 0x25, 0x28, 0x61, 0xA7, 0x20, 0xEC, 0xCD,
	0x09, 0x4F, 0xCD, 0x04, 0x41, 0xC9, 0xE5, 0x2A, 0x00, 0x50, 0x11, 0x00,
	0x98, 0xED, 0x52, 0xE1, 0x28, 0xD9, 0xCD, 0xBE, 0x4E, 0xC3, 0xF6, 0x4D,
	0xEB, 0x2A, 0xFC, 0x4F, 0xED, 0x52, 0xEB, 0x28, 0xCA, 0xCD, 0xAC, 0x4E,
	0xC3, 0xF6, 0x4D, 0xE5, 0xED, 0x5B, 0x00, 0x50, 0x2A, 0xFE, 0x4F, 0x73,
	0x23, 0x72, 0x23, 0x22, 0xFE, 0x4F, 0xEB, 0xE1, 0xC9, 0x2A, 0xFE, 0x4F,
	0x2B, 0x56, 0x2B, 0x5E, 0x22, 0xFE, 0x4F, 0xEB, 0xC9, 0xE5, 0xD5, 0xC5,
	0x21, 0x00, 0x00, 0x22, 0xF1, 0x4F, 0x11, 0x01, 0x80, 0x62, 0x01, 0xFF,
	0x17, 0x36, 0x00, 0xED, 0xB0, 0xC1, 0xD1, 0xE1, 0xC9, 0xE5, 0xCD, 0x77,
	0x47, 0xCD, 0xED, 0x4E, 0xE1, 0xC3, 0x70, 0x4E, 0x21, 0x14, 0x4F, 0x06,
	0x20, 0x3E, 0x80, 0xAE, 0x77, 0x23, 0x10, 0xF9, 0xC9, 0x21, 0x14, 0x4F,
	0xCB, 0x7E, 0x28, 0x03, 0xCD, 0xED, 0x4E, 0xDD, 0x21, 0x35, 0x4F, 0xC9,
	0x3E, 0x1E, 0xED, 0x47, 0xDD, 0x21, 0x81, 0x02, 0xC9, 0xED, 0x4F, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xAE, 0x06, 0x07, 0x10,
	0xFE, 0x05, 0x21, 0x00, 0x80, 0x11, 0x20, 0x00, 0x06, 0xC0, 0x7C, 0xED,
	0x47, 0x7D, 0xCD, 0x12, 0xCF, 0x19, 0x05, 0xC2, 0x43, 0x4F, 0xCD, 0x92,
	0x02, 0xCD, 0x20, 0x02, 0xDD, 0x21, 0x35, 0x4F, 0xC3, 0xA4, 0x02, 0xE5,
	0xD5, 0xC5, 0xD9, 0xE5, 0x21, 0xF2, 0x4F, 0xFE, 0x0A, 0x28, 0x7F, 0x26,
	0x0B, 0x6F, 0x29, 0x29, 0x29, 0xD9, 0x3A, 0xF1, 0x4F, 0xF6, 0x80, 0x67,
	0x2E, 0x00, 0x3A, 0xF2, 0x4F, 0x5F, 0x83, 0x83, 0x83, 0x83, 0x83, 0x3C,
	0x3C, 0x5F, 0x16, 0x00, 0xCB, 0x3B, 0xCB, 0x3B, 0xCB, 0x3B, 0x19, 0xE5,
	0x2F, 0xE6, 0x07, 0x3C, 0x32, 0xF3, 0x4F, 0xE6, 0x07, 0x5F, 0x16, 0x00,
	0x21, 0xF4, 0x4F, 0x19, 0x56, 0x23, 0x5E, 0xE1, 0xD9, 0x06, 0x08, 0x7E,
	0xD9, 0x4F, 0x3A, 0xF3, 0x4F, 0xFE, 0x05, 0x38, 0x11, 0x2F, 0xC6, 0x09,
	0xA7, 0x47, 0x79, 0x0E, 0x00, 0x28, 0x0E, 0x1F, 0xCB, 0x19, 0x10, 0xFB,
	0x18, 0x07, 0x47, 0xAF, 0xCB, 0x11, 0x17, 0x10, 0xFB, 0x47, 0x7A, 0xA6,
	0xB0, 0x77, 0x23, 0x7B, 0xA6, 0xB1, 0x77, 0x01, 0x1F, 0x00, 0x09, 0xD9,
	0x23, 0x10, 0xCC, 0x21, 0xF2, 0x4F, 0x7E, 0x3C, 0x77, 0xFE, 0x2A, 0x38,
	0x09, 0x3E, 0x01, 0x32, 0x02, 0x50, 0xAF, 0x77, 0x2B, 0x34, 0xE1, 0xD9,
	0xC1, 0xD1, 0xE1, 0xC9, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFC, 0x0F, 0xF0,
	0x3F, 0xC0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x1F,
	0x24, 0x25, 0x1D, 0x1E, 0xFF, 0x1A, 0xBE, 0xC0, 0xFE, 0x20, 0xC8, 0x23,
	0x13, 0x18, 0xF6, 0x21, 0x07, 0x51, 0xCD, 0x4D, 0x44, 0x28, 0x07, 0x21,
	0x06, 0x51, 0xCD, 0x4D, 0x44, 0xC0, 0xAF, 0x11, 0x00, 0x6C, 0xCD, 0xF8,
	0x1F, 0xAF, 0x77, 0x21, 0x94, 0x53, 0x11, 0x80, 0x6F, 0x7E, 0xFE, 0x1B,
	0x28, 0x0E, 0xE5, 0x21, 0x00, 0x70, 0xCD, 0xF3, 0x43, 0x7D, 0xE1, 0x12,
	0x23, 0x13, 0x18, 0xED, 0x3E, 0x20, 0x12, 0x21, 0x00, 0x80, 0x11, 0x80,
	0x6F, 0xCD, 0x0A, 0x50, 0x28, 0x12, 0x23, 0x7E, 0xB7, 0xC8, 0xFE, 0x0A,
	0x28, 0x07, 0xFE, 0x0D, 0x28, 0x02, 0x18, 0xF2, 0x23, 0x23, 0x18, 0xE6,
	0x23, 0x7E, 0xFE, 0x20, 0x28, 0xFA, 0x11, 0xA2, 0x51, 0x06, 0x06, 0x7E,
	0x23, 0xE5, 0xC5, 0xFE, 0x2D, 0x20, 0x05, 0x3E, 0xFF, 0x13, 0x18, 0x22,
	0xD5, 0x21, 0xA1, 0x51, 0x01, 0x28, 0x00, 0xED, 0xB9, 0x51, 0x1E, 0x05,
	0xCD, 0xF8, 0x50, 0x3C, 0x47, 0x5A, 0x16, 0x00, 0x21, 0x18, 0x51, 0x19,
	0x7E, 0xD1, 0x12, 0x13, 0x3E, 0xFF, 0xB7, 0x17, 0x10, 0xFD, 0x12, 0x13,
	0xC1, 0xE1, 0x10, 0xCB, 0x26, 0x80, 0x06, 0x08, 0x3E, 0xFF, 0x2E, 0x75,
	0x77, 0x2D, 0x20, 0xFC, 0x24, 0x10, 0xF7, 0x21, 0x20, 0x51, 0x11, 0xA2,
	0x51, 0x06, 0x06, 0xC5, 0x1A, 0x13, 0x0E, 0xFF, 0x1F, 0x0C, 0x38, 0xFC,
	0xCB, 0xF9, 0x1A, 0x13, 0xD5, 0x51, 0x46, 0x23, 0x5E, 0x23, 0xEB, 0xF5,
	0xA6, 0x77, 0xF1, 0xEB, 0x10, 0xF6, 0xD1, 0xC1, 0x10, 0xE1, 0x26, 0x80,
	0x06, 0xFE, 0x16, 0x08, 0x1E, 0x3A, 0x2E, 0x03, 0x7E, 0x4D, 0x23, 0x23,
	0xED, 0x79, 0x1D, 0x20, 0xF7, 0x78, 0x07, 0x47, 0x24, 0x15, 0x20, 0xEC,
	0xD3, 0xFE, 0xC9, 0xAF, 0x06, 0x08, 0xCB, 0x22, 0x17, 0xBB, 0x38, 0x02,
	0x93, 0x14, 0x10, 0xF6, 0xC9, 0x18, 0x2F, 0x34, 0x3E, 0x28, 0x2B, 0x2C,
	0x1B, 0x39, 0x3D, 0x39, 0x19, 0x1F, 0x1E, 0x23, 0x22, 0x24, 0xFF, 0xFE,
	0xFD, 0xFB, 0xF7, 0xEF, 0xDF, 0xBF, 0x7F, 0x0C, 0x11, 0x15, 0x13, 0x31,
	0x51, 0x35, 0x33, 0x55, 0x53, 0x71, 0x75, 0x73, 0x0C, 0x09, 0x0D, 0x0B,
	0x29, 0x49, 0x2D, 0x2B, 0x4D, 0x4C, 0x69, 0x6D, 0x6B, 0x0C, 0x05, 0x15,
	0x0D, 0x25, 0x45, 0x35, 0x2D, 0x55, 0x4D, 0x65, 0x75, 0x6D, 0x0C, 0x03,
	0x13, 0x0B, 0x23, 0x43, 0x33, 0x2B, 0x53, 0x4B, 0x63, 0x73, 0x6B, 0x12,
	0x21, 0x23, 0x25, 0x29, 0x31, 0x2B, 0x33, 0x2D, 0x35, 0x61, 0x63, 0x65,
	0x69, 0x71, 0x6B, 0x73, 0x6D, 0x75, 0x12, 0x41, 0x43, 0x45, 0x49, 0x51,
	0x4B, 0x53, 0x4D, 0x55, 0x61, 0x63, 0x65, 0x69, 0x71, 0x6B, 0x73, 0x6D,
	0x75, 0x5E, 0x5A, 0x58, 0x43, 0x56, 0x41, 0x53, 0x44, 0x46, 0x47, 0x51,
	0x57, 0x45, 0x52, 0x54, 0x31, 0x32, 0x33, 0x34, 0x35, 0x30, 0x39, 0x38,
	0x37, 0x36, 0x50, 0x4F, 0x49, 0x55, 0x59, 0x23, 0x4C, 0x4B, 0x4A, 0x48,
	0x5F, 0x2E, 0x4D, 0x4E, 0x42, 0xEF, 0xF7, 0xEF, 0xEF, 0xF7, 0xEF, 0xEF,
	0xFB, 0xEF, 0xFE, 0xBF, 0xFE, 0x21, 0x8A, 0x6E, 0x3E, 0x12, 0xCD, 0x64,
	0x44, 0xCD, 0xC8, 0x40, 0xD8, 0x21, 0x94, 0x53, 0x11, 0x80, 0x6F, 0xCD,
	0x06, 0x44, 0x21, 0x03, 0x50, 0xCD, 0x06, 0x44, 0x11, 0x80, 0x6F, 0xCD,
	0xB3, 0x4D, 0xCD, 0xFA, 0x51, 0x28, 0x04, 0x3E, 0x10, 0x18, 0x1F, 0xCD,
	0x07, 0x52, 0xB7, 0x20, 0x19, 0xCD, 0xCA, 0x4E, 0xCD, 0xCA, 0x52, 0xCD,
	0x82, 0x52, 0xCD, 0xFA, 0x4E, 0xCD, 0x7E, 0x47, 0xB7, 0x20, 0xFA, 0xCD,
	0x09, 0x4F, 0xCD, 0x04, 0x41, 0xC9, 0xC3, 0xC8, 0x40, 0x2A, 0xF0, 0x52,
	0x11, 0x4D, 0x42, 0x7E, 0xBA, 0xC0, 0x23, 0x7E, 0xBB, 0xC9, 0x2A, 0xF0,
	0x52, 0x11, 0x1C, 0x00, 0x19, 0x5E, 0x23, 0x56, 0x3E, 0x01, 0xBB, 0x3E,
	0x11, 0xC0, 0x23, 0x5E, 0x23, 0x56, 0x7B, 0xB2, 0x3E, 0x12, 0xC0, 0x2A,
	0xF0, 0x52, 0x11, 0x12, 0x00, 0x19, 0x5E, 0x23, 0x56, 0xCB, 0x3A, 0xCB,
	0x1B, 0xCB, 0x3A, 0xCB, 0x1B, 0xCB, 0x3A, 0xCB, 0x1B, 0x7A, 0xB7, 0x3E,
	0x13, 0xC0, 0x7B, 0xFE, 0x21, 0x3E, 0x13, 0xD0, 0x7B, 0x32, 0xF4, 0x52,
	0x23, 0x23, 0x23, 0x5E, 0x23, 0x56, 0x7A, 0xB7, 0x3E, 0x03, 0xC0, 0x7B,
	0xFE, 0xC1, 0x3E, 0x14, 0xD0, 0x7B, 0x32, 0xF5, 0x52, 0x2A, 0xF0, 0x52,
	0x11, 0x36, 0x00, 0x19, 0x7E, 0x23, 0x5E, 0x23, 0x56, 0xB3, 0xB2, 0x3E,
	0x00, 0xC2, 0x6F, 0x52, 0x3E, 0x2F, 0x32, 0xBE, 0x52, 0x2A, 0xF0, 0x52,
	0x11, 0x0A, 0x00, 0x19, 0x5E, 0x23, 0x56, 0xED, 0x53, 0xF2, 0x52, 0xAF,
	0xC9, 0x2A, 0xF0, 0x52, 0xED, 0x5B, 0xF2, 0x52, 0x19, 0x3A, 0xF4, 0x52,
	0x32, 0xB2, 0x52, 0x47, 0x5F, 0x3A, 0xF5, 0x52, 0x4F, 0xE5, 0x3D, 0x67,
	0x2E, 0x00, 0x55, 0xCD, 0x55, 0x47, 0xEB, 0xE1, 0x19, 0x11, 0x00, 0x80,
	0xC3, 0xB7, 0x52, 0xE5, 0x21, 0x20, 0x00, 0x19, 0xEB, 0xE1, 0xD5, 0xAF,
	0x11, 0x00, 0x00, 0xED, 0x52, 0xD1, 0xC5, 0xE5, 0xD5, 0x7E, 0xEE, 0xFF,
	0x12, 0x00, 0x23, 0x13, 0x10, 0xF7, 0xD1, 0xE1, 0xC1, 0x0D, 0x20, 0xDF,
	0xC9, 0x3A, 0xF4, 0x52, 0x5F, 0x3E, 0x20, 0x93, 0xCB, 0x3F, 0x5F, 0x3A,
	0xF5, 0x52, 0x57, 0x3E, 0xC0, 0x92, 0xCB, 0x3F, 0x57, 0x01, 0x20, 0x00,
	0x21, 0x00, 0x80, 0xB7, 0x28, 0x04, 0x09, 0x15, 0x20, 0xFC, 0x19, 0x22,
	0xA3, 0x52, 0xC9, 0x00, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF,
	0xEF, 0xEF, 0xDF, 0xF7, 0xDF, 0xEF, 0xF7, 0xBF, 0xFD, 0xEF, 0xEF, 0x00,
	0x00, 0xBC, 0x48, 0xAC, 0x4A, 0xEF, 0xDF, 0x00, 0x00, 0xBC, 0x48, 0xCE,
	0x4A, 0xF7, 0xDF, 0x00, 0x00, 0xAA, 0x48, 0x6E, 0x4A, 0xEF, 0xF7, 0x00,
	0x00, 0xAA, 0x48, 0x88, 0x4A, 0xBF, 0xFD, 0x00, 0x00, 0xAA, 0x48, 0x0D,
	0x4A, 0xBF, 0xFC, 0x00, 0x00, 0xAA, 0x48, 0xEF, 0x48, 0xFE, 0xF6, 0x00,
	0x00, 0xAA, 0x48, 0xBA, 0x49, 0xFD, 0xF6, 0x00, 0x00, 0xAA, 0x48, 0x46,
	0x4B, 0xFE, 0xEE, 0x00, 0x00, 0xAA, 0x48, 0x86, 0x4B, 0x7F, 0xF6, 0x00,
	0x00, 0xAA, 0x48, 0x23, 0x4C, 0xFB, 0xEE, 0x00, 0x00, 0xAA, 0x48, 0x74,
	0x4C, 0xBF, 0xF6, 0x00, 0x00, 0xAA, 0x48, 0x25, 0x4D, 0x7F, 0xFB, 0x00,
	0x00, 0xAA, 0x48, 0xA4, 0x49, 0xEF, 0xDE, 0x00, 0x00, 0xAA, 0x48, 0x62,
	0x49, 0xEF, 0xEE, 0x00, 0x00, 0xAA, 0x48, 0x3D, 0x49, 0xBF, 0xDE, 0x00,
	0x00, 0xAA, 0x48, 0x86, 0x4D, 0xFB, 0xFC, 0x00, 0x00, 0xAA, 0x48, 0xA7,
	0x4A, 0x00, 0xF7, 0xFC, 0x00, 0x00, 0xAA, 0x48, 0xDF, 0x48, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x9E, 0x55, 0xA1, 0x55, 0xAC, 0x55, 0xBB,
	0x55, 0xCC, 0x55, 0xD4, 0x55, 0xDC, 0x55, 0xE9, 0x55, 0xF7, 0x55, 0x03,
	0x56, 0x12, 0x56, 0x22, 0x56, 0x30, 0x56, 0x3C, 0x56, 0x4A, 0x56, 0x57,
	0x56, 0x5F, 0x56, 0x6B, 0x56, 0x83, 0x56, 0x9F, 0x56, 0xB5, 0x56, 0xCC,
	0x56, 0xCC, 0x56, 0xCC, 0x56, 0xCC, 0x56, 0xCC, 0x56, 0xCC, 0x56, 0xCC,
	0x56, 0xCC, 0x56, 0xCC, 0x56, 0xCC, 0x56, 0xCC, 0x56, 0x20, 0x49, 0x54,
	0x45, 0x4D, 0x53, 0x20, 0xFF, 0x20, 0x42, 0x59, 0x54, 0x45, 0x53, 0x20,
	0xFF, 0x3B, 0x33, 0x32, 0x37, 0x36, 0x38, 0xFF, 0x3B, 0x33, 0x32, 0x37,
	0x36, 0x38, 0x2C, 0xFF, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x5A, 0x58, 0x50, 0x41, 0x4E, 0x44, 0x2D, 0x43, 0x4F, 0x4D, 0x4D, 0x41,
	0x4E, 0x44, 0x45, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0xFF, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4F, 0x4E, 0x20, 0x31, 0x2E, 0x38,
	0xFF, 0x0D, 0x43, 0x55, 0x52, 0x53, 0x4F, 0x52, 0x20, 0x4B, 0x45, 0x59,
	0x53, 0x20, 0x2D, 0x20, 0x4D, 0x4F, 0x56, 0x45, 0x20, 0x53, 0x45, 0x4C,
	0x45, 0x43, 0x54, 0x49, 0x4F, 0x4E, 0xFF, 0x53, 0x48, 0x49, 0x46, 0x54,
	0x20, 0x55, 0x50, 0x2F, 0x44, 0x4E, 0x20, 0x2D, 0x20, 0x4A, 0x55, 0x4D,
	0x50, 0x20, 0x55, 0x50, 0x2F, 0x44, 0x4E, 0xFF, 0x0D, 0x45, 0x4E, 0x54,
	0x45, 0x52, 0x20, 0x2D, 0x20, 0x4F, 0x50, 0x45, 0x4E, 0x20, 0x53, 0x55,
	0x42, 0x44, 0x49, 0x52, 0x20, 0x4F, 0x52, 0x20, 0x45, 0x58, 0x45, 0x43,
	0x20, 0x50, 0x52, 0x4F, 0x47, 0xFF, 0x53, 0x48, 0x49, 0x46, 0x54, 0x20,
	0x45, 0x4E, 0x54, 0x45, 0x52, 0x20, 0x2D, 0x20, 0x4F, 0x50, 0x45, 0x4E,
	0x20, 0x53, 0x55, 0x42, 0x44, 0x49, 0x52, 0x20, 0x3E, 0x4F, 0x54, 0x48,
	0x45, 0x52, 0xFF, 0x2E, 0x20, 0x2D, 0x20, 0x47, 0x4F, 0x20, 0x55, 0x50,
	0x20, 0x41, 0x20, 0x44, 0x49, 0x52, 0x20, 0x4C, 0x45, 0x56, 0x45, 0x4C,
	0xFF, 0x0D, 0x53, 0x48, 0x49, 0x46, 0x54, 0x20, 0x43, 0x20, 0x2D, 0x20,
	0x43, 0x4F, 0x50, 0x59, 0x20, 0x46, 0x49, 0x4C, 0x45, 0x20, 0x3E, 0x4F,
	0x54, 0x48, 0x45, 0x52, 0xFF, 0x53, 0x48, 0x49, 0x46, 0x54, 0x20, 0x4D,
	0x20, 0x2D, 0x20, 0x4D, 0x4F, 0x56, 0x45, 0x20, 0x46, 0x49, 0x4C, 0x45,
	0x20, 0x3E, 0x4F, 0x54, 0x48, 0x45, 0x52, 0xFF, 0x53, 0x48, 0x49, 0x46,
	0x54, 0x20, 0x44, 0x20, 0x2D, 0x20, 0x44, 0x45, 0x4C, 0x45, 0x54, 0x45,
	0x20, 0x46, 0x49, 0x4C, 0x45, 0xFF, 0x53, 0x48, 0x49, 0x46, 0x54, 0x20,
	0x58, 0x20, 0x2D, 0x20, 0x45, 0x58, 0x45, 0x43, 0x20, 0x50, 0x52, 0x4F,
	0x47, 0x20, 0x57, 0x49, 0x54, 0x48, 0x20, 0x3B, 0x58, 0x20, 0x46, 0x4C,
	0x41, 0x47, 0xFF, 0x0D, 0x53, 0x48, 0x49, 0x46, 0x54, 0x20, 0x52, 0x20,
	0x2D, 0x20, 0x52, 0x45, 0x4E, 0x41, 0x4D, 0x45, 0x20, 0x46, 0x49, 0x4C,
	0x45, 0xFF, 0x53, 0x48, 0x49, 0x46, 0x54, 0x20, 0x4B, 0x20, 0x2D, 0x20,
	0x4B, 0x52, 0x45, 0x41, 0x54, 0x45, 0x20, 0x41, 0x20, 0x53, 0x55, 0x42,
	0x44, 0x49, 0x52, 0xFF, 0x53, 0x48, 0x49, 0x46, 0x54, 0x2D, 0x53, 0x50,
	0x41, 0x43, 0x45, 0x20, 0x43, 0x41, 0x4E, 0x43, 0x45, 0x4C, 0x53, 0x20,
	0x54, 0x45, 0x58, 0x54, 0x20, 0x49, 0x4E, 0x50, 0x55, 0x54, 0xFF, 0x0D,
	0x53, 0x48, 0x49, 0x46, 0x54, 0x20, 0x51, 0x20, 0x2D, 0x20, 0x51, 0x55,
	0x49, 0x54, 0xFF, 0x0D, 0x50, 0x52, 0x45, 0x53, 0x53, 0x20, 0x41, 0x20,
	0x4B, 0x45, 0x59, 0xFF, 0x1B, 0x4F, 0x4B, 0xFF, 0x44, 0x49, 0x53, 0x4B,
	0x20, 0x45, 0x52, 0x52, 0x4F, 0x52, 0xFF, 0x49, 0x4E, 0x54, 0x45, 0x52,
	0x4E, 0x41, 0x4C, 0x20, 0x45, 0x52, 0x52, 0x4F, 0x52, 0xFF, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x20, 0x4E, 0x4F, 0x54, 0x20, 0x52, 0x45, 0x41,
	0x44, 0x59, 0xFF, 0x4E, 0x4F, 0x20, 0x46, 0x49, 0x4C, 0x45, 0xFF, 0x4E,
	0x4F, 0x20, 0x50, 0x41, 0x54, 0x48, 0xFF, 0x49, 0x4E, 0x56, 0x41, 0x4C,
	0x49, 0x44, 0x20, 0x4E, 0x41, 0x4D, 0x45, 0xFF, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x20, 0x44, 0x45, 0x4E, 0x49, 0x45, 0x44, 0xFF, 0x46, 0x49,
	0x4C, 0x45, 0x20, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0xFF, 0x49, 0x4E,
	0x56, 0x41, 0x4C, 0x49, 0x44, 0x20, 0x4F, 0x42, 0x4A, 0x45, 0x43, 0x54,
	0xFF, 0x57, 0x52, 0x49, 0x54, 0x45, 0x20, 0x50, 0x52, 0x4F, 0x54, 0x45,
	0x43, 0x54, 0x45, 0x44, 0xFF, 0x49, 0x4E, 0x56, 0x41, 0x4C, 0x49, 0x44,
	0x20, 0x44, 0x52, 0x49, 0x56, 0x45, 0xFF, 0x4E, 0x4F, 0x54, 0x20, 0x45,
	0x4E, 0x41, 0x42, 0x4C, 0x45, 0x44, 0xFF, 0x4E, 0x4F, 0x20, 0x46, 0x49,
	0x4C, 0x45, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4D, 0xFF, 0x4D, 0x4B, 0x46,
	0x53, 0x20, 0x41, 0x42, 0x4F, 0x52, 0x54, 0x45, 0x44, 0xFF, 0x54, 0x49,
	0x4D, 0x45, 0x4F, 0x55, 0x54, 0xFF, 0x4E, 0x4F, 0x20, 0x42, 0x4D, 0x50,
	0x20, 0x46, 0x49, 0x4C, 0x45, 0xFF, 0x55, 0x4E, 0x53, 0x55, 0x50, 0x50,
	0x4F, 0x52, 0x54, 0x45, 0x44, 0x20, 0x42, 0x49, 0x54, 0x4D, 0x41, 0x50,
	0x20, 0x54, 0x59, 0x50, 0x45, 0xFF, 0x55, 0x4E, 0x53, 0x55, 0x50, 0x50,
	0x4F, 0x52, 0x54, 0x45, 0x44, 0x20, 0x42, 0x4D, 0x50, 0x20, 0x43, 0x4F,
	0x4D, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4F, 0x4E, 0xFF, 0x55, 0x4E,
	0x53, 0x55, 0x50, 0x50, 0x4F, 0x52, 0x54, 0x45, 0x44, 0x20, 0x42, 0x4D,
	0x50, 0x20, 0x57, 0x49, 0x44, 0x54, 0x48, 0xFF, 0x55, 0x4E, 0x53, 0x55,
	0x50, 0x50, 0x4F, 0x52, 0x54, 0x45, 0x44, 0x20, 0x42, 0x4D, 0x50, 0x20,
	0x48, 0x45, 0x49, 0x47, 0x54, 0x48, 0xFF, 0x55, 0x4E, 0x45, 0x58, 0x50,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x20, 0x45, 0x52, 0x52, 0x4F, 0x52, 0xFF,
	0x52, 0x45, 0x4E, 0x41, 0x4D, 0x45, 0xFF, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x20, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4F, 0x52, 0x59, 0xFF,
	0x50, 0x52, 0x45, 0x53, 0x53, 0x20, 0x53, 0x48, 0x49, 0x46, 0x54, 0x2D,
	0x48, 0x20, 0x46, 0x4F, 0x52, 0x20, 0x48, 0x45, 0x4C, 0x50, 0xFF, 0xFF,
	0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
	0x0F, 0x76, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
	0x0F, 0x0F, 0x0F, 0x77, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x0F, 0x0B, 0x0F,
	0x0D, 0x0F, 0x0F, 0x0F, 0x10, 0x11, 0x17, 0x15, 0x1A, 0x16, 0x1B, 0x18,
	0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x0E, 0x19,
	0x13, 0x14, 0x12, 0x0F, 0x0F, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C,
	0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
	0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x0F, 0x18, 0x0F, 0x0F, 0x0F,
	0x0F, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
	0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C,
	0x3D, 0x3E, 0x3F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, 0x20, 0x00, 0x00,
	0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0xF8, 0x50, 0x50,
	0xF8, 0x50, 0x00, 0x00, 0x20, 0x78, 0xA0, 0x70, 0x28, 0xF0, 0x20, 0xC0,
	0xC8, 0x10, 0x20, 0x40, 0x98, 0x18, 0x00, 0x00, 0x40, 0xA0, 0x40, 0xA8,
	0x90, 0x68, 0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x10, 0x20, 0x20, 0x20, 0x20, 0x10, 0x00, 0x00, 0x40, 0x20, 0x20, 0x20,
	0x20, 0x40, 0x00, 0x00, 0x00, 0x50, 0x20, 0xF8, 0x20, 0x50, 0x00, 0x00,
	0x00, 0x20, 0x20, 0xF8, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x20, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x08, 0x10, 0x20,
	0x40, 0x80, 0x00, 0x00, 0x70, 0x98, 0xA8, 0xA8, 0xC8, 0x70, 0x00, 0x00,
	0x20, 0x60, 0x20, 0x20, 0x20, 0x70, 0x00, 0x00, 0x70, 0x88, 0x08, 0x70,
	0x80, 0xF8, 0x00, 0x00, 0x70, 0x88, 0x30, 0x08, 0x88, 0x70, 0x00, 0x00,
	0x30, 0x50, 0x50, 0x90, 0xF8, 0x10, 0x00, 0x00, 0xF8, 0x80, 0xF0, 0x08,
	0x88, 0x70, 0x00, 0x00, 0x70, 0x80, 0xF0, 0x88, 0x88, 0x70, 0x00, 0x00,
	0xF8, 0x08, 0x10, 0x10, 0x20, 0x20, 0x00, 0x00, 0x70, 0x88, 0x70, 0x88,
	0x88, 0x70, 0x00, 0x00, 0x70, 0x88, 0x88, 0x78, 0x08, 0x70, 0x00, 0x00,
	0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
	0x20, 0x20, 0x40, 0x00, 0x00, 0x10, 0x20, 0x40, 0x20, 0x10, 0x00, 0x00,
	0x00, 0x00, 0xF8, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x40, 0x20, 0x10,
	0x20, 0x40, 0x00, 0x00, 0x70, 0x88, 0x10, 0x20, 0x00, 0x20, 0x00, 0x00,
	0x70, 0x88, 0xB8, 0xB0, 0x80, 0x78, 0x00, 0x00, 0x70, 0x88, 0x88, 0xF8,
	0x88, 0x88, 0x00, 0x00, 0xF0, 0x88, 0xF0, 0x88, 0x88, 0xF0, 0x00, 0x00,
	0x70, 0x88, 0x80, 0x80, 0x88, 0x70, 0x00, 0x00, 0xE0, 0x90, 0x88, 0x88,
	0x90, 0xE0, 0x00, 0x00, 0xF8, 0x80, 0xF0, 0x80, 0x80, 0xF8, 0x00, 0x00,
	0xF8, 0x80, 0xF0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x70, 0x88, 0x80, 0x98,
	0x88, 0x70, 0x00, 0x00, 0x88, 0x88, 0xF8, 0x88, 0x88, 0x88, 0x00, 0x00,
	0x70, 0x20, 0x20, 0x20, 0x20, 0x70, 0x00, 0x00, 0x38, 0x10, 0x10, 0x10,
	0x90, 0x60, 0x00, 0x00, 0x88, 0x90, 0xA0, 0xE0, 0x90, 0x88, 0x00, 0x00,
	0x80, 0x80, 0x80, 0x80, 0x80, 0xF8, 0x00, 0x00, 0x88, 0xD8, 0xA8, 0x88,
	0x88, 0x88, 0x00, 0x00, 0x88, 0xC8, 0xA8, 0x98, 0x88, 0x88, 0x00, 0x00,
	0x70, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00, 0xF0, 0x88, 0x88, 0xF0,
	0x80, 0x80, 0x00, 0x00, 0x70, 0x88, 0x88, 0xA8, 0x90, 0x68, 0x00, 0x00,
	0xF0, 0x88, 0x88, 0xF0, 0x90, 0x88, 0x00, 0x00, 0x70, 0x80, 0x70, 0x08,
	0x88, 0x70, 0x00, 0x00, 0xF8, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00,
	0x88, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00, 0x88, 0x88, 0x88, 0x50,
	0x50, 0x20, 0x00, 0x00, 0x88, 0x88, 0xA8, 0xA8, 0xA8, 0x50, 0x00, 0x00,
	0x88, 0x50, 0x20, 0x20, 0x50, 0x88, 0x00, 0x00, 0x88, 0x88, 0x50, 0x20,
	0x20, 0x20, 0x00, 0x00, 0x78, 0x08, 0x10, 0x20, 0x40, 0x78, 0x00, 0x00,
	0x70, 0x40, 0x40, 0x40, 0x40, 0x70, 0x00, 0x00, 0x00, 0x80, 0x40, 0x20,
	0x10, 0x08, 0x00, 0x00, 0x70, 0x10, 0x10, 0x10, 0x10, 0x70, 0x00, 0x00,
	0x20, 0x50, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xF8, 0x00, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x70, 0x08, 0x78, 0x88, 0x78, 0x00, 0x00, 0x80, 0x80, 0xB0, 0xC8,
	0x88, 0xF0, 0x00, 0x00, 0x00, 0x70, 0x80, 0x80, 0x80, 0x70, 0x00, 0x00,
	0x08, 0x08, 0x68, 0x98, 0x88, 0x78, 0x00, 0x00, 0x00, 0x70, 0x88, 0xF8,
	0x80, 0x70, 0x00, 0x00, 0x30, 0x48, 0xE0, 0x40, 0x40, 0x40, 0x00, 0x00,
	0x00, 0x70, 0x88, 0x98, 0x68, 0x08, 0x70, 0x00, 0x80, 0x80, 0xB0, 0xC8,
	0x88, 0x88, 0x00, 0x00, 0x20, 0x00, 0x60, 0x20, 0x20, 0x70, 0x00, 0x00,
	0x10, 0x00, 0x30, 0x10, 0x10, 0x90, 0x60, 0x00, 0x40, 0x48, 0x50, 0x60,
	0x50, 0x48, 0x00, 0x00, 0x60, 0x20, 0x20, 0x20, 0x20, 0x70, 0x00, 0x00,
	0x00, 0xD0, 0xA8, 0xA8, 0xA8, 0xA8, 0x00, 0x00, 0x00, 0xB0, 0xC8, 0x88,
	0x88, 0x88, 0x00, 0x00, 0x00, 0x70, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00,
	0x00, 0xF0, 0x88, 0xC8, 0xB0, 0x80, 0x80, 0x00, 0x00, 0x70, 0x88, 0x98,
	0x68, 0x08, 0x08, 0x00, 0x00, 0xB0, 0xC8, 0x80, 0x80, 0x80, 0x00, 0x00,
	0x00, 0x70, 0x80, 0x70, 0x08, 0xF0, 0x00, 0x00, 0x40, 0xF0, 0x40, 0x40,
	0x40, 0x30, 0x00, 0x00, 0x00, 0x88, 0x88, 0x88, 0x98, 0x68, 0x00, 0x00,
	0x00, 0x88, 0x88, 0x50, 0x50, 0x20, 0x00, 0x00, 0x00, 0x88, 0x88, 0x88,
	0xA8, 0x50, 0x00, 0x00, 0x00, 0x88, 0x50, 0x20, 0x50, 0x88, 0x00, 0x00,
	0x00, 0x88, 0x88, 0x98, 0x68, 0x08, 0x70, 0x00, 0x00, 0xF8, 0x10, 0x20,
	0x40, 0xF8, 0x00, 0x10, 0x20, 0x20, 0x40, 0x20, 0x20, 0x10, 0x00, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x40, 0x20, 0x20, 0x10, 0x20,
	0x20, 0x40, 0x00, 0x00, 0x68, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x20, 0x50, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x20, 0x20,
	0x20, 0x20, 0x00, 0x00, 0x20, 0x70, 0x88, 0x80, 0x88, 0x70, 0x20, 0x00,
	0x30, 0x40, 0xE0, 0x40, 0x48, 0xB0, 0x00, 0x38, 0x40, 0xF0, 0x40, 0xF0,
	0x40, 0x38, 0x00, 0x00, 0x88, 0x50, 0xF8, 0x20, 0xF8, 0x20, 0x00, 0x50,
	0x20, 0x78, 0x80, 0x70, 0x08, 0x08, 0xF0, 0x30, 0x48, 0x20, 0x50, 0x20,
	0x90, 0x60, 0x00, 0x50, 0x20, 0x70, 0x80, 0x70, 0x08, 0xF0, 0x00, 0x70,
	0x88, 0xA8, 0xB8, 0xA8, 0x88, 0x70, 0x00, 0x60, 0x90, 0x90, 0x68, 0x00,
	0xF8, 0x00, 0x00, 0x00, 0x28, 0x50, 0xA0, 0x50, 0x28, 0x00, 0x00, 0xF0,
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x70, 0x88, 0xA8, 0x88, 0x98, 0xA8, 0x70, 0x00, 0xF8,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x90, 0x90, 0x60, 0x00,
	0x00, 0x00, 0x00, 0x20, 0x20, 0xF8, 0x20, 0x20, 0x00, 0xF8, 0x00, 0x60,
	0x90, 0x20, 0x40, 0xF0, 0x00, 0x00, 0x00, 0xE0, 0x10, 0x60, 0x10, 0xE0,
	0x00, 0x00, 0x00, 0x50, 0x20, 0xF8, 0x10, 0x20, 0x40, 0xF8, 0x00, 0x00,
	0x88, 0x88, 0x98, 0xE8, 0x80, 0x80, 0x00, 0x00, 0x78, 0xA8, 0xA8, 0x68,
	0x28, 0x28, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x50,
	0x20, 0x00, 0xF0, 0x20, 0x40, 0xF0, 0x00, 0x40, 0xC0, 0x40, 0x40, 0xE0,
	0x00, 0x00, 0x00, 0x60, 0x90, 0x90, 0x60, 0x00, 0xF0, 0x00, 0x00, 0x00,
	0xA0, 0x50, 0x28, 0x50, 0xA0, 0x00, 0x00, 0x00, 0x78, 0xA0, 0xB8, 0xA0,
	0xA0, 0x78, 0x00, 0x00, 0x00, 0x50, 0xA8, 0xB8, 0xA0, 0x58, 0x00, 0x88,
	0x00, 0x88, 0x50, 0x20, 0x20, 0x20, 0x00, 0x00, 0x20, 0x00, 0x20, 0x40,
	0x88, 0x70, 0x00, 0x40, 0x20, 0x70, 0x88, 0xF8, 0x88, 0x88, 0x00, 0x10,
	0x20, 0x70, 0x88, 0xF8, 0x88, 0x88, 0x00, 0x20, 0x50, 0x70, 0x88, 0xF8,
	0x88, 0x88, 0x00, 0x68, 0x90, 0x70, 0x88, 0xF8, 0x88, 0x88, 0x00, 0x50,
	0x00, 0x70, 0x88, 0xF8, 0x88, 0x88, 0x00, 0x20, 0x50, 0x20, 0x70, 0x88,
	0xF8, 0x88, 0x88, 0x00, 0x38, 0x60, 0xB8, 0xE0, 0xA0, 0xB8, 0x00, 0x00,
	0x70, 0x88, 0x80, 0x88, 0x70, 0x20, 0x40, 0x40, 0x20, 0xF8, 0x80, 0xF0,
	0x80, 0xF8, 0x00, 0x10, 0x20, 0xF8, 0x80, 0xF0, 0x80, 0xF8, 0x00, 0x20,
	0x50, 0xF8, 0x80, 0xF0, 0x80, 0xF8, 0x00, 0x50, 0x00, 0xF8, 0x80, 0xF0,
	0x80, 0xF8, 0x00, 0x40, 0x20, 0x70, 0x20, 0x20, 0x20, 0x70, 0x00, 0x10,
	0x20, 0x70, 0x20, 0x20, 0x20, 0x70, 0x00, 0x20, 0x50, 0x70, 0x20, 0x20,
	0x20, 0x70, 0x00, 0x50, 0x00, 0x70, 0x20, 0x20, 0x20, 0x70, 0x00, 0x70,
	0x48, 0x48, 0xE8, 0x48, 0x48, 0x70, 0x00, 0x68, 0x90, 0x88, 0xC8, 0xA8,
	0x98, 0x88, 0x00, 0x40, 0x20, 0x70, 0x88, 0x88, 0x88, 0x70, 0x00, 0x10,
	0x20, 0x70, 0x88, 0x88, 0x88, 0x70, 0x00, 0x20, 0x50, 0x70, 0x88, 0x88,
	0x88, 0x70, 0x00, 0x68, 0x90, 0x70, 0x88, 0x88, 0x88, 0x70, 0x00, 0x50,
	0x00, 0x70, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00, 0x88, 0x50, 0x20, 0x50,
	0x88, 0x00, 0x00, 0x08, 0x70, 0x98, 0xA8, 0xA8, 0xC8, 0x70, 0x80, 0x40,
	0x20, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00, 0x10, 0x20, 0x88, 0x88, 0x88,
	0x88, 0x70, 0x00, 0x20, 0x50, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00, 0x50,
	0x00, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00, 0x10, 0x20, 0x88, 0x50, 0x20,
	0x20, 0x20, 0x00, 0xC0, 0x40, 0x70, 0x48, 0x48, 0x70, 0x40, 0xE0, 0x00,
	0x30, 0x48, 0x70, 0x48, 0x48, 0xB0, 0x00, 0x40, 0x20, 0x70, 0x08, 0x78,
	0x88, 0x78, 0x00, 0x10, 0x20, 0x70, 0x08, 0x78, 0x88, 0x78, 0x00, 0x20,
	0x50, 0x70, 0x08, 0x78, 0x88, 0x78, 0x00, 0x68, 0x90, 0x70, 0x08, 0x78,
	0x88, 0x78, 0x00, 0x50, 0x00, 0x70, 0x08, 0x78, 0x88, 0x78, 0x00, 0x20,
	0x50, 0x20, 0x70, 0x08, 0x78, 0x88, 0x78, 0x00, 0xD0, 0x28, 0x78, 0xA0,
	0xA8, 0x50, 0x00, 0x00, 0x00, 0x70, 0x80, 0x80, 0x70, 0x20, 0x40, 0x40,
	0x20, 0x70, 0x88, 0xF8, 0x80, 0x70, 0x00, 0x10, 0x20, 0x70, 0x88, 0xF8,
	0x80, 0x70, 0x00, 0x20, 0x50, 0x70, 0x88, 0xF8, 0x80, 0x70, 0x00, 0x50,
	0x00, 0x70, 0x88, 0xF8, 0x80, 0x70, 0x00, 0x40, 0x20, 0x00, 0x60, 0x20,
	0x20, 0x70, 0x00, 0x10, 0x20, 0x00, 0x60, 0x20, 0x20, 0x70, 0x00, 0x20,
	0x50, 0x00, 0x60, 0x20, 0x20, 0x70, 0x00, 0x00, 0x50, 0x00, 0x60, 0x20,
	0x20, 0x70, 0x00, 0xA0, 0x40, 0xA0, 0x10, 0x78, 0x88, 0x70, 0x00, 0x68,
	0x90, 0x00, 0xB0, 0xC8, 0x88, 0x88, 0x00, 0x40, 0x20, 0x00, 0x70, 0x88,
	0x88, 0x70, 0x00, 0x10, 0x20, 0x00, 0x70, 0x88, 0x88, 0x70, 0x00, 0x20,
	0x50, 0x00, 0x70, 0x88, 0x88, 0x70, 0x00, 0x68, 0x90, 0x00, 0x70, 0x88,
	0x88, 0x70, 0x00, 0x00, 0x50, 0x00, 0x70, 0x88, 0x88, 0x70, 0x00, 0x00,
	0x20, 0x00, 0xF8, 0x00, 0x20, 0x00, 0x00, 0x00, 0x08, 0x70, 0x98, 0xA8,
	0xC8, 0x70, 0x80, 0x40, 0x20, 0x00, 0x88, 0x88, 0x98, 0x68, 0x00, 0x10,
	0x20, 0x00, 0x88, 0x88, 0x98, 0x68, 0x00, 0x20, 0x50, 0x00, 0x88, 0x88,
	0x98, 0x68, 0x00, 0x00, 0x50, 0x00, 0x88, 0x88, 0x98, 0x68, 0x00, 0x00,
	0x10, 0x20, 0x88, 0x98, 0x68, 0x08, 0x70, 0x60, 0x20, 0x20, 0x30, 0x28,
	0x30, 0x20, 0x70, 0x00, 0x50, 0x00, 0x88, 0x98, 0x68, 0x08, 0x70, 0x76,
	0x00, 0x01, 0x0B, 0x00, 0xF9, 0xD4, 0xC5, 0x0B, 0x1D, 0x22, 0x21, 0x1D,
	0x20, 0x0B, 0x76, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x76, 0x80
};






static BYTE res;

static DIR dir;
static FIL fil;
static FILINFO filinfo;
static FATFS fatfs;

static int sb;

extern BYTE windowData[];

extern WORD globalAmount;
extern BYTE globalIndex;
extern BYTE globalDataPresent;

extern BYTE* near gdp;
extern BYTE near mode;

extern volatile BYTE near ring_error;

#define WILD_LEN  16
char  WildPattern[WILD_LEN+1];

// use only immediately after open
extern void get_fileinfo_special(FILINFO *);

char defaultExtension;
WORD defaultLoadAddr;

extern void mem_cpy (void* dst, const void* src, int cnt);
extern char chk_chr (const rom char* str, char chr);

extern void tryProgramCPLD(const char* filename);

extern void ringReset(void);
extern int serialAvailable(void);
extern BYTE serialRead(void);
extern void serialWrite(BYTE);
extern void serialPrint(char*);
extern void serialInit(int, int);
extern void serialClose(void);
extern void serialHex(BYTE);

extern void delayMillis(short);

#define GOOUTPUTMODE {gdp = globalData; mode = 0;}


/*
BYTE L007E[] =
{
00   0x3F,0x3D,
02   0x28,0x3B,
04   0x26,0x38,
06   0x29,0x2B,

08   0x2C,0x36,
10   0x3C,0x2A,
12   0x37,0x39,
14   0x1D,0x1E,

16   0x1F,0x20,
18   0x21,0x1C,
20   0x25,0x24,
22   0x23,0x22,

24   0x35,0x34,
26   0x2E,0x3A,
28   0x3E,0x76,
30   0x31,0x30,

32   0x2F,0x2D,
34   0x00,0x1B,
36   0x32,0x33,
38   0x27
};
*/

// take the character required for the equivalent joystick - 0x1b and
// report the offset at that index; Z = 0x3f. 0x3f-0x1b = 36d. offs2char[36] = 0.
//
// '0', or space, is hardcoded as 34d, n/l as 29d
//
static BYTE ROM char2offs[] =
{
    35,19, // 1b
    14,15, // 1d
    16,17, // 1f
    18,23, // 21
    22,21, // 23
    20, 4, // 25
    38, 2, // 27
    6,11, // 29
    7, 8, // 2b
    33,26, // 2d
    32,31, // 2f
    30,36, // 31
    37,25, // 33
    24, 9, // 35
    12, 5, // 37
    13,27, // 39
    3,10, // 3b
    1,28, // 3d
    0, 0  // 3f + pad
};

static char ROM ascii2zxData[] = {
    0x00,0x0f,0x0b,0x0f,0x0d,0x0f,0x0f,0x0f,
    0x10,0x11,0x17,0x15,0x1a,0x16,0x1b,0x18,

    0x1c,0x1d,0x1e,0x1f,0x20,0x21,0x22,0x23,
    0x24,0x25,0x0e,0x19,0x13,0x14,0x12,0x0f,

    0x0f,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,
    0x2d,0x2e,0x2f,0x30,0x31,0x32,0x33,0x34,

    0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,
    0x3d,0x3e,0x3f,0x0f,0x18,0x0f,0x0f,0x0f,

    0x0f,0xa6,0xa7,0xa8,0xa9,0xaa,0xab,0xac,
    0xad,0xae,0xaf,0xb0,0xb1,0xb2,0xb3,0xb4,

    0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xbb,0xbc,
    0xbd,0xbe,0xbf,0x0f,0x0f,0x0f,0x0f,0x0f
};

BYTE ascii2zx(char n)
{
    if (n == '\n') return 0x76;
    if (n < 32) return 0x0f;
    return ascii2zxData[n - 32];
}

#define ZEDDY_LT 0x13
#define ZEDDY_GT 0x12


static char ROM zx2ascii81[] = " ??????????\"?$:?()><=+-*/;,"             // 0..26 inclusive (indexed in zx->ascii conversion) - watch out for the \" escape sequence!
                               ".0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"    // 27-63 inclusive (indexed in zx->ascii conversion)
                               "-()$;\0";                                 // zero-terminated additions for the valid filename test

static char ROM zx2ascii80[] = "....";

char ROM* zx2ascii = zx2ascii81;
// TODO: have ZX80 mode switch


// dot onwards, and on to the filename test additions
//
static const ROM char* validfns = &zx2ascii81[24];


/* zx80 tokens are present in character strings:

        DEFB    $99                     ; ;     $d7
        DEFB    $9A                     ; ,     $d8
        DEFB    $91                     ; (     $d9
        DEFB    $90                     ; )     $da
        DEFB    $33,$34,$B9             ; NOT
        DEFB    $92                     ; -     $dc
        DEFB    $93                     ; +     $dd
        DEFB    $94                     ; *     $de
        DEFB    $95                     ; /     $df
        DEFB    $26,$33,$A9             ; AND
        DEFB    $34,$B7                 ; OR
        DEFB    $14,$14+$80             ; **
        DEFB    $96                     ; =     $e3
        DEFB    $97                     ; <     $e4
        DEFB    $98                     ; >     $e5
*/
static char ROM zx80Token2ascii[] = ";,()?-+*/???=<>";


#if defined(__BORLANDC__)
#pragma pack(push, 1)
#endif
static struct
{
    BYTE op;       // 16444
    BYTE retval;   // 16445
    BYTE len;      // 16446
    WORD address;  // 16447
}
zxpandRetblk;
#if defined(__BORLANDC__)
#pragma pack(pop)
#endif



static const rom char* SEPARATOR = "=";
static const rom char* SPACE = " ";
static const rom char* SEMICOL = ";";
static const rom char* EIGHT40 =   "8-40K";
static const rom char* SIXTEEN48 = "16-48K";
//                                ---\-----========--------=====\===
static const rom char* VERSION = "ZXPAND+ 1.6 \"TROLL\"";
//static const rom char* VERSION = "-= RETRO COMPUTER MUSEUM =-";
static const rom char* MOREMSG = "\nPRESS break OR ANY OTHER KEY";

typedef const rom far char* RFC;


BYTE jsmap[6];

void mapJS(BYTE dirn, BYTE val)
{
    int q = 0;

    if (val == 0)
    {
        q = 39;
    }
    else if (val == 0x76)
    {
        q = 29;
    }
    else
    {
        q = char2offs[val - 0x1b];
    }

    jsmap[dirn] = q;
}

// decode joystick bits into INKEY$ directions
// ATM only UDLR & fire are reported - no diagonals
void decodeJS(void)
{
    BYTE idx = 5;
    BYTE temp = GETJS;

    // fire gets priority
    //
    if ((temp & 0x08) == 0)
    {
        idx = 4;
    }
    else if((temp & 0x80) == 0)
    {
        idx = 0;
    }
    else if ((temp & 0x40) == 0)
    {
        idx = 1;
    }
    else if ((temp & 0x20) == 0)
    {
        idx = 2;
    }
    else if ((temp & 0x10) == 0)
    {
        idx = 3;
    }

    if (idx != 5)
    {
        LATD = jsmap[idx];
    }
    else
    {
        LATD = 0xff;
    }
}

void zeddyHBT2asciiZ(unsigned char* buffer)
{
    unsigned char q = 0;
    do
    {
        q = *buffer;
        if (q & 0x40)
        {
            if (q > 0xd6 && q < 0xe6)
            {
                *buffer = zx80Token2ascii[q - 0xd7];
            }
            else
            {
                *buffer = '?';
            }
        }
        else
        {
            *buffer = zx2ascii[q & 0x3f];
        }

        ++buffer;
    }
    while (q < 128);
    *buffer = 0;
}

void deZeddify(unsigned char* buffer)
{
    unsigned char q;
    while (*buffer)
    {
        q = *buffer;
        if (q & 0x40)
        {
            if (q > 0xd6 && q < 0xe6)
            {
                *buffer = zx80Token2ascii[q - 0xd7];
            }
            else
            {
                *buffer = '?';
            }
        }
        else
        {
            *buffer = zx2ascii[q & 0x3f];
        }

        ++buffer;
    }
}



void zeddify(BYTE* buffer)
{
    while (*buffer)
    {
        *buffer = ascii2zx(*buffer);
        ++buffer;
    }
    // force 'zeddy' type termination
    *buffer = 255;
}


void zeddifyUpper(BYTE* buffer)
{
    while (*buffer)
    {
        *buffer = ascii2zx(toupper(*buffer));
        ++buffer;
    }
    // force 'zeddy' type termination
    *buffer = 255;
}



// check that the supplied ascii filename only consists of alphanums slash and dot.
char isValidFN(unsigned char* buffer)
{
    while (*buffer)
    {
        char c = chk_chr(validfns, *buffer);
        if (c == 0 || c == ';')
            return c;
        ++buffer;
    }

    return 1;
}



void zx_initprocessor(void)
{
    fatfs.win = windowData;

    f_chdrive(0);
    f_mount(0, &fatfs);
}



void GetWildcard(char* p)
{
    unsigned int Idx = 0;
    int   WildPos     = -1;
    int   LastSlash   = -1;

    //log0("GetWildcard() %s\n",(const char *)p);

    while ((Idx<strlen((const char*)p)) && (WildPos<0))
    {
        // Check for wildcard character
        if((p[Idx]=='?') || (p[Idx]=='*'))
            WildPos=Idx;

        // Check for path seperator
        if((p[Idx]=='\\') || (p[Idx]=='/'))
            LastSlash=Idx;

        Idx++;
    }

    if(WildPos>-1)
    {
        if(LastSlash>-1)
        {
            // Path followed by wildcard
            // Terminate dir filename at last slash and copy wildcard
            p[LastSlash]=0x00;
            strncpy(WildPattern,(const char*)&p[LastSlash+1],WILD_LEN);
        }
        else
        {
            // Wildcard on it's own
            // Copy wildcard, then set path to null
            strncpy(WildPattern,(const char*)p,WILD_LEN);
            p[0]=0x00;
        }
    }
    else
    {
        WildPattern[0]='*';
        WildPattern[1]=0;
    }

    //log0("GetWildcard() globalData=%s WildPattern=%s\n",(const char*)globalData,WildPattern);
}




static int dirstate;
BYTE dirFlags = 0xff;

BYTE directoryOpen(char* p)
{
    char ret = 0x40 + FR_INVALID_NAME;

    filinfo.fattrib = 0; // normal dir mode

    if (*p == '>')
    {
        // we will change to the directory
        ret = 0x40 | f_chdir((char*)(p + 1));
        if (ret == 0x40)
        {
            // the CD succeeded, so instruct the 'read directory entry' routine to exit with 'all done'
            filinfo.fattrib = 0x42;
        }
    }
    else if (*p == '+')
    {
        // we will try to create a directory
        ret = 0x40 | f_mkdir((char*)(p + 1));
        if (ret == 0x40)
        {
            // the CD succeeded, so instruct the 'read directory entry' routine to exit with 'all done'
            filinfo.fattrib = 0x42;
        }
    }
    else
    {
        // Separate wildcard and path
        GetWildcard(p);
        if (isValidFN(p))
        {
            dirstate = 0; // reading dirs

            memcpy((void*)(p + 64), (void*)p, 64);
            ret = 0x40 + f_opendir(&dir, (const char*)&p[64]);
        }
    }

    return ret;
}

void comDirectoryOpen(void)
{
    deZeddify(globalData);

    LATD = directoryOpen(globalData);
}


int directoryStat(char* g)
{
    char *p;
    int Match, count = 0;

    while (1)
    {
        res = f_readdir(&dir, &filinfo);
        if (res != FR_OK)
        {
            return count;
        }

        p = &filinfo.fname[0];
        if (*p == '.' && *(p+1) == 0) continue;

        if (!*p)
        {
            f_opendir(&dir, (const char*)&globalData[64]);

            ++dirstate;
            if (dirstate == 1) continue;

            return count;
        }

        // need to do this test first
        if (filinfo.fattrib & AM_HID) continue;
        if ((filinfo.fattrib & AM_DIR) == AM_DIR && dirstate == 1) continue;
        if ((filinfo.fattrib & AM_DIR) == 0      && dirstate == 0) continue;

        if (wildcmp(WildPattern,p))
        {
            ++count;
        }
    }
}


BYTE directoryRead(char* g)
{
    char *p;
    char* originalG = g;
    int Match;

    if (filinfo.fattrib == 0x42)
    {
        // early bath
        // com function only returns status code
        filinfo.fattrib = 0;
        return 0x3f;
    }

    while (1)
    {
        res = f_readdir(&dir, &filinfo);
        if (res != FR_OK)
        {
            return 0x40 | res;
        }

        p = &filinfo.fname[0];
        if (*p == '.' && *(p+1) == 0) continue;

        if (!*p)
        {
            // done a loop, need to go again?
            if (dirstate == 0)
            {
                dirstate = 1;
                f_opendir(&dir, (const char*)&globalData[64]);
                continue;
            }
            // com function only returns status code
            return 0x3f;
        }

        // need to do this test first
        if (filinfo.fattrib & AM_HID) continue;
        if ((filinfo.fattrib & AM_DIR) == AM_DIR && dirstate == 1) continue;
        if ((filinfo.fattrib & AM_DIR) == 0      && dirstate == 0) continue;

        Match=wildcmp(WildPattern,p);

        if(Match)
        {
            if (filinfo.fattrib & AM_DIR)
            {
                if (dirFlags == 0xff)
                    g += sprintf(g, (rom far char*)"<%s>", p);
                else
                    g += sprintf(g, (rom far char*)"%s/", p);
            }
            else
            {
                if (dirFlags == 0xff)
                {
                    g += sprintf(g, (rom far char*)"%s", p);
                }
                else
                {
                    g += sprintf(g, (rom far char*)"%-13s", p);
                    if (filinfo.fsize > 1024)
                        g += sprintf(g, (rom far char*)"% 4ldK", filinfo.fsize / (DWORD)1024);
                    else
                        g += sprintf(g, (rom far char*)"% 4ldB", filinfo.fsize);
                }
            }

            *g = 0;
            zxpandRetblk.len = (BYTE)(g - originalG);
            zeddifyUpper(originalG);

            if (dirFlags == 0xff)
            {
                // classic compatibility mode - 0 terminated
                *g = 0;
                ++g;
            }
            else
            {
                // plus mode - newline/ff terminated
                *g = 0x76;
                ++g;
                *g = 0xff;
                ++g;
            }

            // just for giggles put the attribute & filesize in the buffer
            //
            *g = filinfo.fattrib;
            ++g;

            mem_cpy(g, (void*)(&filinfo.fsize), sizeof(DWORD));

            return 0x40;
        }
    }
}

void comDirectoryRead(void)
{
    GOOUTPUTMODE;
    LATD = directoryRead(globalData);
}


static WORD flags;
static WORD start;
static WORD length;

static char* fp_fn = (char*)(&globalData[128]);
static char* fp_fnBak = (char*)(&globalData[128+32]);

static char paramStore[64];


static unsigned char fileOpen(char*p, unsigned char mode)
{
    char* token;
    char autogenext = 1;

    if (*p == '+' || *p == '>')
    {
        ++p;
    }

    if (*p == '/')
    {
        autogenext = 0;
    }

    if (!isValidFN((unsigned char*)p))
    {
        return 0x40 + FR_INVALID_NAME;
    }

    token = strtokpgmram(p, (RFC)SEMICOL);
    if (NULL == token)
    {
        // no filename specified
        return 0x40 + FR_INVALID_NAME;
    }

    // change $ for 0x7e, to support short LFN forms
    {
        if (p[6] == '$')
        {
            p[6] = 0x7e;
        }
    }

    start = defaultLoadAddr;
    length = 0;
    flags = 0;

    // parse optional parameters
    //
    while ((token = strtokpgmram((char*)NULL, (RFC)SEMICOL)) != NULL)
    {
        // if it starts with an alpha then it's a flag - add it to the bitset
        if (isalpha(*token))
        {
            if (*token == 'X')
            {
                flags |= 1;
            }
        }
        else
        {
            // see if it's of the form start,end: if not it's just start
            //
            char* comma = strchr(token,',');
            start = atoi(token);
            if (comma)
            {
                length = atoi(comma+1);
            }
        }
    }

    // now all the params are parsed, we can create the filename
    //
    {
        char* newFN = fp_fn;
        char found = 0;
        for(token = p; *token; ++token, ++newFN)
        {
            *newFN = *token;
            if (*token == '.')
            {
                found = 1;
            }
        }
        *newFN = 0;
        if (!found && autogenext)
        {
            *newFN = '.';
            ++newFN;
            *newFN = defaultExtension;
            ++newFN;
            *newFN = 0;
        }
    }

    return 0x40 | f_open(&fil, fp_fn, mode);
}

static const int D_FILE = 0x400c;
static const int NXTLIN = 0x4029;
void (*modifyBytes)(void)=NULL;
void stop(void)
{
    int x = NXTLIN - 0x4009;
    int y = D_FILE - 0x4009;
    globalData[x] = globalData[y];
    globalData[x+1] = globalData[y+1];
}

void comFileOpenRead(void)
{
    char *p, *param;

    sb = -1;

    if (globalData[strlen(globalData) - 1] == 227)
    {
       modifyBytes = stop;
       globalData[strlen(globalData) - 1] = 0;
    }

    p = globalData;
    deZeddify(p);

    paramStore[0] = 0;
    if ((param = strchr(p,':')) != NULL)
    {
        strcpy(paramStore, param+1);
        *param = 0;
    }

    res = fileOpen(p, FA_OPEN_EXISTING|FA_READ);

    if (0x40 == res)
    {
        get_fileinfo_special(&filinfo);

        if (length == 0)
        {
            length = (WORD)filinfo.fsize;
        }

        // hack to make programs auto-disable ROM if read-only attribute is set
        if (filinfo.fattrib & AM_RDO)
        {
            flags |= 1;
        }

        globalData[6] = filinfo.fsize & 0xff;
        globalData[7] = (filinfo.fsize >>  8) & 0xff;
        globalData[8] = (filinfo.fsize >> 16) & 0xff;
        globalData[9] = (filinfo.fsize >> 24) & 0xff;
    }
    else
    {
        if (*p == '$')
        {
            serialInit(12, 1);

            delayMillis(100);

            serialWrite('I');
            while(serialAvailable() < 2);
            length = serialRead();
            length += 256 * serialRead();
            res = 0x40;
            sb = 0;
        }
    }
    globalData[0] = length & 255;
    globalData[1] = length / 256;
    globalData[2] = start & 255;
    globalData[3] = start / 256;
    globalData[4] = flags & 255;
    globalData[5] = flags / 256;

// WHY 10?
    memset(&globalData[10], 0, 32-10);

    GOOUTPUTMODE;
    LATD = res;
}


void comBoot(void)
{
    BYTE bootName[5]= {0x32,0x2a,0x33,0xba,0x00};
    memcpy(globalData, (void*)bootName, 5);
    comFileOpenRead();
}

void comFileOpenWrite(void)
{
    deZeddify(globalData);
    res = fileOpen(globalData, FA_CREATE_NEW|FA_WRITE);

    if (res == 0x48)
    {
        // file exists
        if (globalData[0] == '+' || (fsConfig & 0x03) == 1)
        {
            char* p = fp_fnBak;
            memcpy((void*)fp_fnBak, (void*)fp_fn, 32);
            while(*p != '.') {
                ++p;
            }
            strcpypgm2ram(p, (RFC)".BAK");
            res = 0x40 | f_rename(fp_fn, fp_fnBak);
        }

        if (globalData[0] == '>' || (fsConfig & 0x03) == 2)
        {
            // overwrite (ala dos pipe)
            res = 0x40 | f_unlink(fp_fn);
        }

        if (0x40 == res)
        {
            // now try again
            res = 0x40 | f_open(&fil, fp_fn, FA_CREATE_NEW|FA_WRITE);
        }
    }

    if (0x40 == res)
    {
        globalData[0] = length & 255;
        globalData[1] = length / 256;
        globalData[2] = start & 255;
        globalData[3] = start / 256;
        globalData[4] = flags & 255;
        globalData[5] = flags / 256;

        globalData[6] = filinfo.fsize & 0xff;
        globalData[7] = (filinfo.fsize >>  8) & 0xff;
        globalData[8] = (filinfo.fsize >> 16) & 0xff;
        globalData[9] = (filinfo.fsize >> 24) & 0xff;

        memset(&globalData[10], 0, 32-10);
    }

    GOOUTPUTMODE;
    LATD = res;
}


void comFileSeek(void)
{
    DWORD* dpw = (DWORD*)globalData;
    DWORD seekpos = *dpw;
    LATD = 0x40 | f_lseek (&fil, seekpos);
}


void comFileRead(void)
{
    UINT read;
    BYTE res;

    if (globalAmount == 0)
    {
        globalAmount = 256;
    }

    if (sb >= 0)
    {
        BYTE error;
        do
        {
            BYTE b, *p = (BYTE*)globalData;
            unsigned short crc, rxcrc;
            serialWrite('T');
            serialWrite(sb);
            serialWrite(globalAmount&0xff);

            crc = 0;
            for (read = 0; read < globalAmount; ++read)
            {
                while(!serialAvailable());
                b = serialRead();
                *p = b;
                ++p;

                crc += b;
            }

            while(serialAvailable() < 2);
            rxcrc = serialRead();
            rxcrc += 256 * serialRead();

            error = ring_error | (crc != rxcrc);
            ring_error = 0;
        }
        while(error);

        res = 0x40;
        ++sb;
    }
    else
    {
        res = 0x40 | f_read(&fil, globalData, globalAmount, &read);
    }

    if (modifyBytes)
    {
        modifyBytes();
        modifyBytes = NULL;
    }

    GOOUTPUTMODE;
    LATD = res;
}



void comFileWrite(void)
{
    UINT written;

    if (globalAmount == 0)
    {
        globalAmount = 256;
    }

    LATD = 0x40 | f_write(&fil, (void*)globalData, globalAmount, &written);
}




void comFileClose(void)
{
    if (sb >= 0)
    {
        sb = -1;
        LATD = 0x40;
        serialWrite('X'); // goodnight kiss
        serialInit(12,0); // turn off rx irq
    }
    else LATD=0x40 | f_close(&fil);
}


void comFileRename(void)
{
    char* token;
    char* p = (char*)globalData;

    char ret = 0x40 + FR_INVALID_NAME;

    deZeddify(globalData);

    token = strtokpgmram(p, (RFC)SEMICOL);
    if (NULL != token)
    {
        token = strtokpgmram((char*)NULL, (RFC)SEMICOL);
        if (NULL != token)
        {
            if (isValidFN(globalData) && isValidFN((BYTE*)token))
            {
                ret = 0x40 | f_rename((const XCHAR*)&globalData[0], (const XCHAR*)token);
            }
        }
    }

    LATD = ret;
}


void comFileDelete(void)
{
    char ret = 0x40 + FR_INVALID_NAME;

    deZeddify(globalData);
    if (isValidFN(globalData))
    {
        ret = 0x40 | f_unlink((const XCHAR*)&globalData[0]);
    }

    LATD = ret;
}

BYTE lb;



static BYTE ROM disableOverlay[8] = { 0x01,0x07,0xe0,0x3e,0xb0,0xed,0x79,0xc9 };
static BYTE ROM      setRamtop[9] = { 0x21,0xff,0xff,0x22,0x04,0x40,0xc3,0xc3,0x03 };

// buffer of form "C", "C,C", "C,123"
//
void comParseBuffer(void)
{
    char* token;
    BYTE cmd, retcode = 0x40;

    // keep any raw keycodes that might be lost in a conversionRFC
    //
    mem_cpy((void*)&globalData[128], (void*)&globalData[0], 128);

    deZeddify(globalData);

    //if(!isalpha(globalData[0]))
    //{
    //   LATD = retcode | FR_INVALID_OBJECT;
    //   return;
    //}


    // type 0 - no data, all done
    // type 1 - string to print
    // type 2 - array of ints
    // type 3+ - command identifier [A=3 ... Z=29] + parameter block

    // Set return value  -  'A' = 3.
    //
    cmd = globalData[0]-'A'+3;
    globalData[0] = cmd;

    token = strtokpgmram((char*)&globalData[1], (RFC)SEPARATOR);

    switch(cmd)
    {
    case 0xf2: //'0'-'A'+3:
    {
        // more message
        strcpypgm2ram((char*)&globalData[1], (RFC)MOREMSG);
        zeddify(&globalData[1]);
        globalData[0] = 1;
    }
    break;

    case 'V'-'A'+3:
    {
        // version string

        strcpypgm2ram((char*)&globalData[1], (RFC)VERSION);

        zeddify(&globalData[1]);
        globalData[0] = 1;
    }
    break;

    case 'X'-'A'+3:
    {
        // disable overlay binary
        memcpypgm2ram((void*)(&globalData[1]), (const rom far void*)(&disableOverlay[0]), sizeof(disableOverlay));
        globalData[0] = 2;
    }
    break;

    case 'R'-'A'+3:
    {
        // set RAMTOP binary
        if (!token) break;
        start = atoi(token);
        memcpypgm2ram((void*)(&globalData[1]), (const rom far void*)(&setRamtop[0]), sizeof(setRamtop));
        globalData[0] = 2;
        globalData[2] = start & 255;
        globalData[3] = start / 256;
    }
    break;

    case  'F'-'A'+3:
    {
        // flash cpld
        if (!token) break;

        // hold zeddy in reset while the cpld programs, then reset zxpand
        ASSERT_RESET;
        tryProgramCPLD(token);
        Reset();
    }
    break;

    case 'D'-'A'+3:
    {
        // set current working directory

        if (!token)
        {
            globalData[32]='\\';
            globalData[33]=0;
            token = (char*)&globalData[32];
        }

        retcode |= f_chdir(token);
    }
    break;

    case 'M'-'A'+3:
    {
        // memory map control

        if (token)
        {
            if (*token == 'H')
            {
                // HI ram
                GO_HIGH;
            }
            else if (*token == 'L')
            {
                // LO ram
                GO_LOW;
            }
            else
            {
                retcode |= FR_INVALID_OBJECT;
            }
        }
        else
        {
            if (L_LOW)
            {
                strcpypgm2ram((char*)&globalData[1], (RFC)EIGHT40);
            }
            else
            {
                strcpypgm2ram((char*)&globalData[1], (RFC)SIXTEEN48);
            }

            zeddify(&globalData[1]);
            globalData[0] = 1;
        }
    }
    break;

    case 'C'-'A'+3:
    {
        // config control

        if (token)
        {
            unsigned char n = *token - '0';
            if (n > 9) n -= 7;
            if (n > 15)
            {
                retcode |= FR_INVALID_OBJECT;
                break;
            }
            ++token;
            configByte = n * 16;
            n = *token - '0';
            if (n > 9) n -= 7;
            if (n > 15)
            {
                retcode |= FR_INVALID_OBJECT;
                break;
            }
            configByte += n;
            WriteEEPROM(0x04, configByte);
        }
        else
        {
            unsigned char* p = &globalData[0];
            *p = 1;
            ++p;
            *p = ((configByte & 0xf0) >> 4) + 0x1c;
            ++p;
            *p = (configByte & 15) + 0x1c;
            ++p;
            *p = 0xff;
            ++p;
            *p = configByte;
        }
    }
    break;

    case 'O'-'A'+3:
    {
        // overwrite control
        if (token)
        {
            unsigned char n = *token - '0';
            if (n > 2)
            {
                retcode |= FR_INVALID_OBJECT;
                break;
            }
            fsConfig = n;
            WriteEEPROM(0x05, fsConfig);
        }
        else
        {
            unsigned char* p = &globalData[0];
            *p = 1;
            ++p;
            if ((fsConfig & 3) == 1)
            {
                strcpypgm2ram((char*)p, (RFC)"BAK");
            }
            else if ((fsConfig & 3) == 2)
            {
                strcpypgm2ram((char*)p, (RFC)"OVR");
            }
            else
            {
                strcpypgm2ram((char*)p, (RFC)"ERR");
            }
            zeddify(p);
            p+= 3;
            *p = 0xff;
        }
    }
    break;

    case 'J'-'A'+3:
    {
        // joystick mapping control

        if (token)
        {
            token += 128;
            mapJS(0, *token);
            ++token;
            mapJS(1, *token);
            ++token;
            mapJS(2, *token);
            ++token;
            mapJS(3, *token);
            ++token;
            mapJS(4, *token & 0x3f); // might have top bit set being last char in string
            // might not. there might not be 4 chars there.
        }
        else
        {
            retcode |= FR_INVALID_OBJECT;
        }
    }
    break;
    }

    GOOUTPUTMODE;
    LATD = retcode;
}

enum verbs
{
    V_OPEN, V_PUT, V_GET, V_CLOSE, V_DELETE, V_RENAME
};

rom far char* verbs[] = {
    (rom far char*)"OPE",
    (rom far char*)"PUT",
    (rom far char*)"GET",
    (rom far char*)"CLO",
    (rom far char*)"DEL",
    (rom far char*)"REN",
    (rom far char*)NULL
};

enum nouns
{
    N_SERIAL, N_MIDI, N_FILE, N_CAT, N_PARAM
};

rom far char* streams[] =
{
    (rom far char*)"SER",
    (rom far char*)"MID",
    (rom far char*)"FIL",
    (rom far char*)"CAT",
    (rom far char*)"PAR",
    (rom far char*)NULL
};

char* nextToken(char* q)
{
    while(*q != ' ' && *q != 0) q = q + 1;
    while(*q == ' ') {
        * q = 0;
        q = q + 1;
    }
    return q;
}

int identifyToken(char** p, rom far char** tokens)
{
    int i = 0;
    char* q = *p;
    while(tokens[i] != NULL)
    {
        // match 3 chars
        if (strncmppgm2ram(q, tokens[i], 3) == 0)
        {
            *p = nextToken(*p);
            return i;
        }
        ++i;
    }

    return -1;
}

/*
ED 5B 3F 40  ld de,(16447) ; data ptr
2A 3E 40     ld hl,(16446) ; l = len, h = unused
3E 01	       ld a,$01      ; 1 = write
C3 FC 1F     jp $1ffc      ; api_xfer
*/
static BYTE ROM memPut[12] = { 0xed,0x5b,0x3f,0x40,0x2a,0x3e,0x40,0x3e,0x01,0xc3,0xfc,0x1f };

int zxpandContinuation;

void midiSoundOff(int i, int type)
{
    serialWrite(0xb0|i);
    serialWrite(type);
    serialWrite(0);
}

// buffer of form "VERB STREAMID PARAM PARAM,..."
//
void comParseBufferPlus(void)
{
    char* p;
    int verb, noun;
    BYTE retcode = 0x40;
    zxpandContinuation = -1;

    zeddyHBT2asciiZ(globalData);

    p = globalData;
    verb = identifyToken(&p, verbs);
    if (verb == -1)
    {
        LATD = 0x4a;
        return;
    }

    globalData[0] = 0; // no-op
    noun = identifyToken(&p, streams);

    switch (verb)
    {
    case V_OPEN: {
        switch (noun)
        {
        case N_SERIAL: { // open serial [rate]
            serialInit(12, 1);
        }
        break;

        case N_MIDI: { // open midi
            serialInit(15, 0);
        }
        break;

        case N_FILE: { // open file
            zxpandRetblk.retval = fileOpen(p, FA_OPEN_EXISTING|FA_READ);
        }
        break;

        case N_CAT: { // open catalog, get item count
            int count = 0;
            zxpandRetblk.op = 0;
            zxpandRetblk.retval = directoryOpen(p);

            if (0x40 == zxpandRetblk.retval)
            {
                count = directoryStat(p);
            }

            zxpandRetblk.len = 2;          // 0 = 256
            zxpandRetblk.address = 16449;  // memory ptr

            memcpy(globalData, (void*)&zxpandRetblk, 5);

            globalData[5] = count & 255;
            globalData[6] = count / 256;
        }
        break;

        default:
            putrsUSART((rom far char *)"OPEN ");
            serialHex(noun);
            putrsUSART((rom far char *)" \r");
            break;
        }
    }
    break;

    case V_PUT: {
        switch (noun)
        {
        case 0:    // ser & mid
        case 1: {
            if (*p =='*')
            {
                // PUT SER *30000 123
                char* ap = p + 1;
                char* lp =  nextToken(p);

                int address = atoi(ap);
                int len = atoi(lp);

                zxpandRetblk.op = 2;             // executable
                zxpandRetblk.retval = 0x40;      // all good
                zxpandRetblk.len = len;          // 0 = 256
                zxpandRetblk.address = address;  // memory ptr

                zxpandContinuation = 16 * noun + verb;

                memcpy(globalData, (void*)&zxpandRetblk, 5);
                memcpypgm2ram((void*)(&globalData[5]), (const rom far void*)(&memPut[0]), sizeof(memPut));
            }
            else
            {
                while(*p)
                {
                    serialWrite(*p);
                    ++p;
                }
            }
        }
        break;

        default:
            putrsUSART((rom far char *)"PUT ");
            serialHex(noun);
            putrsUSART((rom far char *)" \r");
            break;
        }
    }
    break;

    case V_GET: {
        switch (noun)
        {
        case N_CAT: { // get cat
            if (*p =='*')
            {
                // GET CAT *30000
                char* ap = p + 1;
                zxpandRetblk.op = 2;                // exec data
                zxpandRetblk.retval = 0x40;
                zxpandRetblk.address = (short)atoi(ap);    // memory ptr

                memcpypgm2ram((void*)(&globalData[5]), (const rom far void*)(&memPut[0]), sizeof(memPut));
                globalData[5+8] = 0; // now it's memget ;)
                directoryRead(&globalData[32]);
            }
            else
            {
                zxpandRetblk.op = 1;             // string data
                zxpandRetblk.address = 16449;    // memory ptr
                zxpandRetblk.retval = directoryRead(&globalData[5]);
            }

            memcpy(globalData, (void*)&zxpandRetblk, 5);
        }
        break;

        case N_PARAM: {
            int o = 32;
            zxpandRetblk.retval = 0x40;
            zxpandRetblk.len = strlen(paramStore);    // memory ptr
            if (*p =='*')
            {
                // GET PARM *30000
                char* ap = p + 1;
                zxpandRetblk.op = 2;                // exec data
                zxpandRetblk.address = (short)atoi(ap);    // memory ptr

                memcpypgm2ram((void*)(&globalData[5]), (const rom far void*)(&memPut[0]), sizeof(memPut));
                globalData[5+8] = 0; // now it's memget ;)
            }
            else
            {
                zxpandRetblk.op = 1;             // string data
                zxpandRetblk.address = 16449;    // memory ptr
                o = 5;
            }

            strcpy(&globalData[o], paramStore);
            zeddify(&globalData[o]);
            memcpy(globalData, (void*)&zxpandRetblk, 5);
        }
        break;

        default:
            putrsUSART((rom far char *)"GET ");
            serialHex(noun);
            putrsUSART((rom far char *)" \r");
            break;
        }
        // get
    }
    break;

    case V_CLOSE: {
        switch (noun)
        {
        case 0:
            serialClose();
            break;

        case 1: {
            int i;
            for(i = 0; i < 16; ++i)
            {
                midiSoundOff(i, 120);
                midiSoundOff(i, 121);
                midiSoundOff(i, 123);
                serialWrite(0xe0|i); // pitch bend reset
                serialWrite(0);
                serialWrite(0x40);
            }

            // pitch bend sensitivity
            serialWrite(101);
            serialWrite(0);
            serialWrite(100);
            serialWrite(0);
            serialWrite(6);
            serialWrite(2);
            serialWrite(38);
            serialWrite(0);

            serialClose();
        }
        break;

        default:
            putrsUSART((rom far char *)"CLOSE ");
            serialHex(noun);
            putrsUSART((rom far char *)" \r");
            break;
        }
        // close
    }
    break;

    case 4: {
        // delete
        retcode = 0x40 | f_unlink(p);
    }
    break;

    case 5: {
        // rename
        char* q = nextToken(p);
        retcode = 0x40 | f_rename(p, q);
    }
    break;
    }

    GOOUTPUTMODE;
    LATD = retcode;
}

void comZXpandContinuation(void)
{
    // cont. = 16 * noun + verb
    switch (zxpandContinuation)
    {
    case 0x01: // ser & mid
    case 0x11: {
        int i;
        for (i = 0; i < globalIndex; ++i)
            serialWrite(globalData[i]);
    }
    break;
    }

    LATD = 0x40;
}




